snippet main
	public static void main (String args[]) {
		${1:/* code */}
	}
snippet pu
	public
snippet po
	protected
snippet pr
	private
snippet st
	static
snippet fi
	final
snippet ab
	abstract
snippet re
	return
snippet br
	break;
snippet de
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet catch
	catch(${1:Exception} ${2:e}) ${3}
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet else
	else {
		${1:/* code */}
	}
snippet elseif
	else if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
snippet for #normal
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Custom For Loop
snippet for #second parameter
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
# switch, it would be great if switch could expands itself :[
snippet switch
	switch (${1:/* expression */}) {
		case ${2:/* constant */}: ${3:/* code */};
			${4:break};${6}
		default: ${5:/* more code */};
			break;
	}
snippet case
	case ${1}:
		${2}
	${3}
snippet class
	${1:public} class ${2:`Filename("", "untitled")`} ${3}
	{
		/**
		* Constructor for $2
		*/
		public $2(${4})
		{
			${5}
		}
	}
snippet interface
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }${5}
snippet v
	${1:String} ${2:var}${3: = null}${4};${5}
snippet assert
	assert ${1:test} : "${2:Failure message}";${3}
# return
snippet return
	return(${1:EXIT_SUCCESS});${2}
# large comment
snippet /***
	/**********************************************************************
	 * ${1:An interesting and long comment}
	 *********************************************************************/${2}
# title comment const char *restrict s
snippet /**
	/*****************************${1:Title}********************************/${2}
# standard comment
snippet /*
	/* ${1:Short comment} */${2}
# elegant comment
snippet /*_
	/* ${1:Comment}
	 */${2}
