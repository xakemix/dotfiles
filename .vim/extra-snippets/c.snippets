######################################################
#   Functions from the "C-Reference for Vim" plugin
#    based on  "The GNU C Library Reference Manual"
######################################################

################ include <assert.h> ##################
# void assert (int expression);
snippet assert
	${1:void }assert(${2:int expression});${3}
################ include <complex.h> #################
# double cabs(double complex z);
snippet cabs
	${1:double }cabs(${2:double complex z});${3}
# float cabsf(float complex z);
snippet cabsf
	${1:float }cabsf(${2:float complex z});${3}
# long double cabsl(long double complex z);
snippet cabsl
	${1:long double }cabsl(${2:long double complex z});${3}
# double complex cpow(double complex base, double complex power);
snippet cpow
	${1:double complex }cpow(${2:double complex base}, ${3:double complex power});${4}
# float complex cpowf(float complex base, double complex power);
snippet cpowf
	${1:float complex }cpowf(${2:float complex base}, ${3:double complex power});${4}
# long double complex cpowl(long double complex base, long double complex power);
snippet cpowl
	${1:long double complex }cpowl(${2:long double complex base}, ${3:long double complex power});${4}
# double complex csqrt(double complex z);
snippet csqrt
	${1:double complex }csqrt(${2:double complex z});${3}
# float complex csqrtf(float complex z);
snippet csqrtf
	${1:float complex }csqrtf(${2:float complex z});${3}
# long double complex csqrtl(long double complex z);
snippet csqrtl
	${1:long double complex }csqrtl(${2:long double complex z});${3}
# double carg(double complex z);
snippet carg
	${1:double }carg(${2:double complex z});${3}
# float cargf(float complex z);$
snippet cargf
	${1:float }cargf(${2:float complex z});${3}
# long double cargl(long double complex z);
snippet cargl
	${1:long double }cargl(${2:long double complex z});${3}
# double cimag(double complex z);
snippet cimag
	${1:double }cimag(${2:double complex z});${3}
# float cimagf(float complex z);
snippet cimagf
	${1:float }cimagf(${2:float complex z});${3}
# long double cimagl(long double complex z);
snippet cimagl
	${1:long double }cimagl(${2:long double complex z});${3}
# double complex conj(double complex z);
snippet conj
	${1:double complex }conj(${2:double complex z});${3}
# float complex conjf(float complex z);
snippet conjf
	${1:float complex }conjf(${2:float complex z});${3}
# long double complex conjl(long double complex z);
snippet conjl
	${1:long double complex }conjl(${2:long double complex z});${3}
# double complex cproj(double complex z);
snippet cproj
	${1:double complex }cproj(${2:double complex z});${3}
# float complex cprojf(float complex z);
snippet cprojf
	${1:float complex }cprojf(${2:float complex z});${3}
# long double complex cprojl(long double complex z);
snippet cprojl
	${1:long double complex }cprojl(${2:long double complex z});${3}
# double creal(double complex z);
snippet creal
	${1:double }creal(${2:double complex z});${3}
# float crealf(float complex z);
snippet crealf
	${1:float }crealf(${2:float complex z});${3}
# long double creall(long double complex z);
snippet creall
	${1:long double }creall(${2:long double complex z});${3}
################ include <ctype.h> #################
# int isalnum(int c);
snippet isalnum
	${1:int }isalnum(${2:int c});${3}
# int isalpha(int c);
snippet isalpha
	${1:int }isalpha(${2:int c});${3}
# int isblank(int c);
snippet isblank
	${1:int }isblank(${2:int c});${3}
# int iscntrl(int c);
snippet iscntrl
	${1:int }iscntrl(${2:int c});${3}
# int isdigit(int c);
snippet isdigit
	${1:int }isdigit(${2:int c});${3}
# int isgraph(int c);
snippet isgraph
	${1:int }isgraph(${2:int c});${3}
# int islower(int c);
snippet islower
	${1:int }islower(${2:int c});${3}
# int isprint(int c);
snippet isprint
	${1:int }isprint(${2:int c});${3}
# int ispunct(int c);
snippet ispunct
	${1:int }ispunct(${2:int c});${3}
# int isspace(int c);
snippet isspace
	${1:int }isspace(${2:int c});${3}
# int isupper(int c);
snippet isupper
	${1:int }isupper(${2:int c});${3}
# int isxdigit(int c);
snippet isxdigit
	${1:int }isxdigit(${2:int c});${3}
# int tolower(int c);
snippet tolower
	${1:int }tolower(${2:int c});${3}
# int toupper(int c);
snippet toupper
	${1:int }toupper(${2:int c});${3}
################ include <fenv.h> #################
# int feclearexcept(int excepts);
snippet feclearexcept
	${1:int }feclearexcept(${2:int excepts});${3}
# int fegetexceptflag(fexcept_t *flagp, int excepts);
snippet fegetexceptflag
	${1:int }fegetexceptflag(${2:fexcept_t *flagp}, ${3:int excepts});${4}
# int feraiseexcept(int excepts);
snippet feraiseexcept
	${1:int }feraiseexcept(${2:int excepts});${3}
# int fesetexceptflag(fexcept_t *flagp, int excepts);
snippet fesetexceptflag
	${1:int }fesetexceptflag(${2:fexcept_t *flagp}, ${3:int excepts});${4}
# int fetestexcept(int excepts);
snippet fetestexcept
	${1:int }fetestexcept(${2:int excepts});${3}
# int fegetround(void);
snippet fegetround
	${1:int }fegetround(void);${2}
# int fesetround(int round);
snippet fesetround
	${1:int }fesetround(${2:int round});${3}
# int fegetenv(fenv_t *envp);
snippet fegetenv
	${1:int }fegetenv(${2:fenv_t *envp});${3}
# int feholdexcept(fenv_t *envp);
snippet feholdexcept
	${1:int }feholdexcept(${2:fenv_t *envp});${3}
# int fesetenv(const fenv_t *envp);
snippet fesetenv
	${1:int }fesetenv(${2:const fenv_t *envp});${3}
# int feupdateenv(const fenv_t *envp);
snippet feupdateenv
	${1:int }feupdateenv(${2:const fenv_t *envp});${3}
################ include <inttypes.h> #################
# intmax_t imaxabs(intmax_t j);
snippet imaxabs
	${1:intmax_t }imaxabs(${2:intmax_t j});${3}
# intdiv_t imaxdiv(intmax_t numerator, intmax_t denominator );
snippet imaxdiv
	${1:intdiv_t }imaxdiv(${2:intmax_t numerator}, ${3:intmax_t denominator});${4}
# intmax_t strtoimax(const char *restrict string, char **restrict tailptr, int base);
snippet strtoimax
	${1:intmax_t }strtoimax(${2:const char *restrict string}, ${3:char **restrict tailptr}, ${4:int base});${5}
# uintmax_t strtoumax(const char *restrict string, char **restrict tailptr, int base);
snippet strtoumax
	${1:uintmax_t }strtoumax(${2:const char *restrict string}, ${3:char **restrict tailptr}, ${4:int base});${5}
# wchar_t wcstoimax(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstoimax
	${1:wchar_t }wcstoimax(${2:const wchar_t *restrict string}, ${3:wchar_t **restrict tailptr}, ${4:int base});${5}
# wchar_t wcstoumax(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstoumax
	${1:wchar_t }wcstoumax(${2:const wchar_t *restrict string}, ${3:wchar_t **restrict tailptr}, ${4:int base});${5}
################ include <local.h> #################
# struct lconv *localeconv(void);
snippet localeconv
	${1:struct lconv *}localeconv(void);${2}
# char *setlocale(int category, const char *locale);
snippet setlocale
	${1:char *}setlocale(${2:int category}, ${3:const char *locale});${4}
################ include <math.h> #################
# int fpclassify(float x);
snippet fpclassify
	${1:int }fpclassify(${2:float x});${3}
# int isfinite(float x);
snippet isfinite
	${1:int }isfinite(${2:float x});${3}
# int isnormal(float x);
snippet isnormal
	${1:int }isnormal(${2:float x});${3}
# int isnan(float x);
snippet isnan
	${1:int }isnan(${2:float x});${3}
# int isinf(float x);
snippet isinf
	${1:int }isinf(${2:float x});${3}
# int isgreater(float x, float y);
snippet isgreater
	${1:int }isgreater(${2:float x}, ${3:float y});${4}
# int isgreaterequal(float x, float y);
snippet isgreaterequal
	${1:int }isgreaterequal(${2:float x}, ${3:float y});${4}
# int isless(float x, float y);
snippet isless
	${1:int }isless(${2:float x}, ${3:float y});${4}
# int islessequal(float x, float y);
snippet islessequal
	${1:int }islessequal(${2:float x}, ${3:float y});${4}
# int islessgreater(float x, float y);
snippet islessgreater
	${1:int }islessgreater(${2:float x}, ${3:float y});${4}
# int isunordered(float x, float y);
snippet isunordered
	${1:int }isunordered(${2:float x}, ${3:float y});${4}
# double asin(double x);
snippet asin
	${1:double }asin(${2:double x});${3}
# float asinf(float x);
snippet asinf
	${1:float }asinf(${2:float x});${3}
# long double asinl(long double x);
snippet asinl
	${1:long double }asinl(${2:long double x});${3}
# double acos(double x);
snippet acos
	${1:double }acos(${2:double x});${3}
# float acosf(float x);
snippet acosf
	${1:float }acosf(${2:float x});${3}
# long double acosl(long double x);
snippet acosl
	${1:long double }acosl(${2:long double x});${3}
# double atan(double x);
snippet atan
	${1:double }atan(${2:double x});${3}
# float atanf(float x);
snippet atanf
	${1:float }atanf(${2:float x});${3}
# long double atanl(long double x);
snippet atanl
	${1:long double }atanl(${2:long double x});${3}
# double atan2(double x);
snippet atan2
	${1:double }atan2(${2:double x});${3}
# float atan2f(float x);
snippet atan2f
	${1:float }atan2f(${2:float x});${3}
# long double atan2l(long double x);
snippet atan2l
	${1:long double }atan2l(${2:long double x});${3}
# double sin(double x);
snippet sin
	${1:double }sin(${2:double x});${3}
# float sinf(float x);
snippet sinf
	${1:float }sinf(${2:float x});${3}
# long double sinl(long double x);
snippet sinl
	${1:long double }sinl(${2:long double x});${3}
# double cos(double x);
snippet cos
	${1:double }cos(${2:double x});${3}
# float cosf(float x);
snippet cosf
	${1:float }cosf(${2:float x});${3}
# long double cosl(long double x);
snippet cosl
	${1:long double }cosl(${2:long double x});${3}
# double tan(double x);
snippet tan
	${1:double }tan(${2:double x});${3}
# float tanf(float x);
snippet tanf
	${1:float }tanf(${2:float x});${3}
# long double tanl(long double x);
snippet tanl
	${1:long double }tanl(${2:long double x});${3}
# double sinh(double x);
snippet sinh
	${1:double }sinh(${2:double x});${3}
# float sinhf(float x);
snippet sinhf
	${1:float }sinhf(${2:float x});${3}
# long double sinhl(long double x);
snippet sinhl
	${1:long double }sinhl(${2:long double x});${3}
# double cosh(double x);
snippet cosh
	${1:double }cosh(${2:double x});${3}
# float coshf(float x);
snippet coshf
	${1:float }coshf(${2:float x});${3}
# long double coshl(long double x);
snippet coshl
	${1:long double }coshl(${2:long double x});${3}
# double tanh(double x);
snippet tanh
	${1:double }tanh(${2:double x});${3}
# float tanhf(float x);
snippet tanhf
	${1:float }tanhf(${2:float x});${3}
# long double tanhl(long double x);
snippet tanhl
	${1:long double }tanhl(${2:long double x});${3}
# double asinh(double x);
snippet asinh
	${1:double }asinh(${2:double x});${3}
# float asinhf(float x);
snippet asinhf
	${1:float }asinhf(${2:float x});${3}
# long double asinhl(long double x);
snippet asinhl
	${1:long double }asinhl(${2:long double x});${3}
# double acosh(double x);
snippet acosh
	${1:double }acosh(${2:double x});${3}
# float acoshf(float x);
snippet acoshf
	${1:float }acoshf(${2:float x});${3}
# long double acoshl(long double x);
snippet acoshl
	${1:long double }acoshl(${2:long double x});${3}
# double atanh(double x);
snippet atanh
	${1:double }atanh(${2:double x});${3}
# float atanhf(float x);
snippet atanhf
	${1:float }atanhf(${2:float x});${3}
# long double atanhl(long double x);
snippet atanhl
	${1:long double }atanhl(${2:long double x});${3}
# double exp(double x);
snippet exp
	${1:double }exp(${2:double x});${3}
# float expf(float x);
snippet expf
	${1:float }expf(${2:float x});${3}
# long double expl(long double x);
snippet expl
	${1:long double }expl(${2:long double x});${3}
# double exp2(double x);
snippet exp2
	${1:double }exp2(${2:double x});${3}
# float exp2f(float x);
snippet exp2f
	${1:float }exp2f(${2:float x});${3}
# long double exp2l(long double x);
snippet exp2l
	${1:long double }exp2l(${2:long double x});${3}
# double expm1(double x);
snippet expm1
	${1:double }expm1(${2:double x});${3}
# float expm1f(float x);
snippet expm1f
	${1:float }expm1f(${2:float x});${3}
# long double expm1l(long double x);
snippet expm1l
	${1:long double }expm1l(${2:long double x});${3}
# int ilogb(double x);
snippet ilogb
	${1:int }ilogb(${2:double x});${3}
# int ilogbf(float x);
snippet ilogbf
	${1:int }ilogbf(${2:float x});${3}
# int ilogbl(long double x);
snippet ilogbl
	${1:int }ilogbl(${2:long double x});${3}
# double log(double x);
snippet log
	${1:double }log(${2:double x});${3}
# float logf(float x);
snippet logf
	${1:float }logf(${2:float x});${3}
# long double logl(long double x);
snippet logl
	${1:long double }logl(${2:long double x});${3}
# double log10(double x);
snippet log10
	${1:double }log10(${2:double x});${3}
# float log10f(float x);
snippet log10f
	${1:float }log10f(${2:float x});${3}
# long double log10l(long double x);
snippet log10l
	${1:long double }log10l(${2:long double x});${3}
# double log1p(double x);
snippet log1p
	${1:double }log1p(${2:double x});${3}
# float log1pf(float x);
snippet log1pf
	${1:float }log1pf(${2:float x});${3}
# long double log1pl(long double x);
snippet log1pl
	${1:long double }log1pl(${2:long double x});${3}
# double log2(double x);
snippet log2
	${1:double }log2(${2:double x});${3}
# float log2f(float x);
snippet log2f
	${1:float }log2f(${2:float x});${3}
# long double log2l(long double x);
snippet log2l
	${1:long double }log2l(${2:long double x});${3}
# double logb(double x);
snippet logb
	${1:double }logb(${2:double x});${3}
# float logbf(float x);
snippet logbf
	${1:float }logbf(${2:float x});${3}
# long double logbl(long double x);
snippet logbl
	${1:long double }logbl(${2:long double x});${3}
# double frexp(double x, int *exponent);
snippet frexp
	${1:double }frexp(${2:double x}, ${3:int *exponent});${4}
# float frexpf(float x, int *exponent);
snippet frexpf
	${1:float }frexpf(${2:float x}, ${3:int *exponent});${4}
# long double frexpl(long double x, int *exponent);
snippet frexpl
	${1:long double }frexpl(${2:long double x}, ${3:int *exponent});${4}
# double ldexp(double x, int exponent);
snippet ldexp
	${1:double }ldexp(${2:double x}, ${3:int exponent});${4}
# float ldexpf(float x, int exponent);
snippet ldexpf
	${1:float }ldexpf(${2:float x}, ${3:int exponent});${4}
# long double ldexpl(long double x, int exponent);
snippet ldexpl
	${1:long double }ldexpl(${2:long double x}, ${3:int exponent});${4}
# double modf(double x, double *intpart);
snippet modf
	${1:double }modf(${2:double x}, ${3:double *intpart});${4}
# float modff(float x, float *intpart);
snippet modff
	${1:float }modff(${2:float x}, ${3:float *intpart});${4}
# long double modfl(long double x, long double *intpart);
snippet modfl
	${1:long double }modfl(${2:long double x}, ${3:long double *intpart});${4}
# double scalbn(double x, int n);
snippet scalbn
	${1:double }scalbn(${2:double x}, ${3:int n});${4}
# float scalbnf(float x, int n);
snippet scalbnf
	${1:float }scalbnf(${2:float x}, ${3:int n});${4}
# long double scalbnl(long double x, int n);
snippet scalbnl
	${1:long double }scalbnl(${2:long double x}, ${3:int n});${4}
# double scalbln(double x, long int n);
snippet scalbln
	${1:double }scalbln(${2:double x}, ${3:long int n});${4}
# float scalblnf(float x, long int n);
snippet scalblnf
	${1:float }scalblnf(${2:float x}, ${3:long int n});${4}
# long double scalblnl(long double x, long int n);
snippet scalblnl
	${1:long double }scalblnl(${2:long double x}, ${3:long int n});${4}
# double cbrt(double x);
snippet cbrt
	${1:double }cbrt(${2:double x});${3}
# float cbrtf(float x);
snippet cbrtf
	${1:float }cbrtf(${2:float x});${3}
# long double cbrtl(long double x);
snippet cbrtl
	${1:long double }cbrtl(${2:long double x});${3}
# double fabs(double x);
snippet fabs
	${1:double }fabs(${2:double x});${3}
# float fabsf(float x);
snippet fabsf
	${1:float }fabsf(${2:float x});${3}
# long double fabsl(long double x);
snippet fabsl
	${1:long double }fabsl(${2:long double x});${3}
# double hypot(double x, double y);
snippet hypot
	${1:double }hypot(${2:double x}, ${3:double y});${4}
# float hypotf(float x, float y);
snippet hypotf
	${1:float }hypotf(${2:float x}, ${3:float y});${4}
# long double hypotl(long double x, long double y);
snippet hypotl
	${1:long double }hypotl(${2:long double x}, ${3:long double y});${4}
# double pow(double x, double y);
snippet pow
	${1:double }pow(${2:double x}, ${3:double y});${4}
# float powf(float x, float y);
snippet powf
	${1:float }powf(${2:float x}, ${3:float y});${4}
# long double powl(long double x, long double y);
snippet powl
	${1:long double }powl(${2:long double x}, ${3:long double y});${4}
# double sqrt(double x);
snippet sqrt
	${1:double }sqrt(${2:double x});${3}
# float sqrtf(float x);
snippet sqrtf
	${1:float }sqrtf(${2:float x});${3}
# long double sqrtl(long double x);
snippet sqrtl
	${1:long double }sqrtl(${2:long double x});${3}
# double erf(double x);
snippet erf
	${1:double }erf(${2:double x});${3}
# float erff(float x);
snippet erff
	${1:float }erff(${2:float x});${3}
# long double erfl(long double x);
snippet erfl
	${1:long double }erfl(${2:long double x});${3}
# double erfc(double x);
snippet erfc
	${1:double }erfc(${2:double x});${3}
# float erfcf(float x);
snippet erfcf
	${1:float }erfcf(${2:float x});${3}
# long double erfcl(long double x);
snippet erfcl
	${1:long double }erfcl(${2:long double x});${3}
# double lgamma(double x);
snippet lgamma
	${1:double }lgamma(${2:double x});${3}
# float lgammaf(float x);
snippet lgammaf
	${1:float }lgammaf(${2:float x});${3}
# long double lgammal(long double x);
snippet lgammal
	${1:long double }lgammal(${2:long double x});${3}
# double tgamma(double x);
snippet tgamma
	${1:double }tgamma(${2:double x});${3}
# float tgammaf(float x);
snippet tgammaf
	${1:float }tgammaf(${2:float x});${3}
# long double tgammal(long double x);
snippet tgammal
	${1:long double }tgammal(${2:long double x});${3}
# double ceil(double x);
snippet ceil
	${1:double }ceil(${2:double x});${3}
# float ceilf(float x);
snippet ceilf
	${1:float }ceilf(${2:float x});${3}
# long double ceill(long double x);
snippet ceill
	${1:long double }ceill(${2:long double x});${3}
# double floor(double x);
snippet floor
	${1:double }floor(${2:double x});${3}
# float floorf(float x);
snippet floorf
	${1:float }floorf(${2:float x});${3}
# long double floorl(long double x);
snippet floorl
	${1:long double }floorl(${2:long double x});${3}
# double trunc(double x);
snippet trunc
	${1:double }trunc(${2:double x});${3}
# float truncf(float x);
snippet truncf
	${1:float }truncf(${2:float x});${3}
# long double truncl(long double x);
snippet truncl
	${1:long double }truncl(${2:long double x});${3}
# double rint(double x);
snippet rint
	${1:double }rint(${2:double x});${3}
# float rintf(float x);
snippet rintf
	${1:float }rintf(${2:float x});${3}
# long double rintl(long double x);
snippet rintl
	${1:long double }rintl(${2:long double x});${3}
# double nearbyint(double x);
snippet nearbyint
	${1:double }nearbyint(${2:double x});${3}
# float nearbyintf(float x);
snippet nearbyintf
	${1:float }nearbyintf(${2:float x});${3}
# long double nearbyintl(long double x);
snippet nearbyintl
	${1:long double }nearbyintl(${2:long double x});${3}
# double round(double x);
snippet round
	${1:double }round(${2:double x});${3}
# float roundf(float x);
snippet roundf
	${1:float }roundf(${2:float x});${3}
# long double roundl(long double x);
snippet roundl
	${1:long double }roundl(${2:long double x});${3}
# long int lrint(double x);
snippet lrint
	${1:long int }lrint(${2:double x});${3}
# long int lrintf(float x);
snippet lrintf
	${1:long int }lrintf(${2:float x});${3}
# long int lrintl(long double x);
snippet lrintl
	${1:long int }lrintl(${2:long double x});${3}
# long long int llrint(double x);
snippet llrint
	${1:long long int }llrint(${2:double x});${3}
# long long int llrintf(float x);
snippet llrintf
	${1:long long int }llrintf(${2:float x});${3}
# long long int llrintl(long double x);
snippet llrintl
	${1:long long int }llrintl(${2:long double x});${3}
# long int lround(double x);
snippet lround
	${1:long int }lround(${2:double x});${3}
# long int lroundf(float x);
snippet lroundf
	${1:long int }lroundf(${2:float x});${3}
# long int lroundl(long double x);
snippet lroundl
	${1:long int }lroundl(${2:long double x});${3}
# long long int llround(double x);
snippet llround
	${1:long long int }llround(${2:double x});${3}
# long long int llroundf(float x);
snippet llroundf
	${1:long long int }llroundf(${2:float x});${3}
# long long int llroundl(long double x);
snippet llroundl
	${1:long long int }llroundl(${2:long double x});${3}
# double fmod(double x, double y);
snippet fmod
	${1:double }fmod(${2:double x}, ${3:double y});${4}
# float fmodf(float x, float y);
snippet fmodf
	${1:float }fmodf(${2:float x}, ${3:float y});${4}
# long double fmodl(long double x, long double y);
snippet fmodl
	${1:long double }fmodl(${2:long double x}, ${3:long double y});${4}
# double remainder(double x, double y);
snippet remainder
	${1:double }remainder(${2:double x}, ${3:double y});${4}
# float remainderf(float x, float y);
snippet remainderf
	${1:float }remainderf(${2:float x}, ${3:float y});${4}
# long double remainderl(long double x, long double y);
snippet remainderl
	${1:long double }remainderl(${2:long double x}, ${3:long double y});${4}
# double remquo(double x, double y, int *quo);
snippet remquo
	${1:double }remquo(${2:double x}, ${3:double y}, ${4:int *quo});${5}
# float remquof(float x, float y, int *quo);
snippet remquof
	${1:float }remquof(${2:float x}, ${3:float y}, ${4:int *quo});${5}
# long double remquol(long double x, long double y, int *quo);
snippet remquol
	${1:long double }remquol(${2:long double x}, ${3:long double y}, ${4:int *quo});${5}
# double copysign(double x, double y);
snippet copysign
	${1:double }copysign(${2:double x}, ${3:double y});${4}
# float copysignf(float x, float y);
snippet copysignf
	${1:float }copysignf(${2:float x}, ${3:float y});${4}
# long double copysignl(long double x, long double y);
snippet copysignl
	${1:long double }copysignl(${2:long double x}, ${3:long double y});${4}
# int signbit(float-type x);
snippet signbit
	${1:int }signbit(${2:float-type x});${3}
# double nextafter(double x, double y);
snippet nextafter
	${1:double }nextafter(${2:double x}, ${3:double y});${4}
# float nextafterf(float x, float y);
snippet nextafterf
	${1:float }nextafterf(${2:float x}, ${3:float y});${4}
# long double nextafetl(long double x, long double y);
snippet nextafetl
	${1:long double }nextafetl(${2:long double x}, ${3:long double y});${4}
# double nexttoward(double x, long double y);
snippet nexttoward
	${1:double }nexttoward(${2:double x}, ${3:long double y});${4}
# float nexttowardf(float x, long double y);
snippet nexttowardf
	${1:float }nexttowardf(${2:float x}, ${3:long double y});${4}
# long double nexttowardl(long double x, long double y);
snippet nexttowardl
	${1:long double }nexttowardl(${2:long double x}, ${3:long double y});${4}
# double nan(const char *tagp);
snippet nan
	${1:double }nan(${2:const char *tagp});${3}
# float nanf(const char *tagp);
snippet nanf
	${1:float }nanf(${2:const char *tagp});${3}
# long double nanl(const char *tagp);
snippet nanl
	${1:long double }nanl(${2:const char *tagp});${3}
# double fdim(double x, double y);
snippet fdim
	${1:double }fdim(${2:double x}, ${3:double y});${4}
# float fdimf(float x, float y);
snippet fdimf
	${1:float }fdimf(${2:float x}, ${3:float y});${4}
# long double fdiml(long double x, long double y);
snippet fdiml
	${1:long double }fdiml(${2:long double x}, ${3:long double y});${4}
# double fmin(double x, double y);
snippet fmin
	${1:double }fmin(${2:double x}, ${3:double y});${4}
# float fminf(float x, float y);
snippet fminf
	${1:float }fminf(${2:float x}, ${3:float y});${4}
# long double fminl(long double x, long double y);
snippet fminl
	${1:long double }fminl(${2:long double x}, ${3:long double y});${4}
# double fmax(double x, double y);
snippet fmax
	${1:double }fmax(${2:double x}, ${3:double y});${4}
# float fmaxf(float x, float y);
snippet fmaxf
	${1:float }fmaxf(${2:float x}, ${3:float y});${4}
# long double fmaxl(long double x, long double y);
snippet fmaxl
	${1:long double }fmaxl(${2:long double x}, ${3:long double y});${4}
# double fma(double x, double y, double z);
snippet fma
	${1:double }fma(${2:double x}, ${3:double y}, ${4:double z});${5}
# float fmaf(float x, float y, float z);
snippet fmaf
	${1:float }fmaf(${2:float x}, ${3:float y}, ${4:float z});${5}
# long double fmal(long double x, long double y, long double z);
snippet fmal
	${1:long double }fmal(${2:long double x}, ${3:long double y}, ${4:long double z});${5}
################ include <setjmp.h> #################
# int setjmp(jmp_buf state);
snippet setjmp
	${1:int }setjmp(${2:jmp_buf state});${3}
# void longjmp(jmp_buf state, int value);
snippet longjmp
	${1:void }longjmp(${2:jmp_buf state}, ${3:int value});${4}
################ include <signal.h> #################
# void (*signal(int sig, void (*handler)(int)))(int);
snippet signal
	${1:void }signal(${2:int sig}, ${3:void (*handler)(int)});${4}
# int raise(int signum);
snippet raise
	${1:int }raise(${2:int signum});${3}
################ include <stdarg.h> #################
# void va_start(va_list ap, last-required);
snippet va_start
	${1:void }va_start(${2:va_list ap}, ${3:last-required});${4}
# type va_arg(va_list ap, type);
snippet va_arg
	${1:type }va_arg(${2:va_list ap}, ${3:type});${4}
# void va_end(va_list ap);
snippet va_end
	${1:void }va_end(${2:va_list ap});${3}
# void va_copy (va_list dest, va_list src);
snippet va_copy
	${1:void }va_copy(${2:va_list dest}, ${3:va_list src});${4}
################ include <stddef.h> #################
# size_t offsetof (type, member);
snippet offsetof
	${1:size_t }offsetof(${2:type}, ${3:member});${4}
################ include <stdint.h> #################
# INTMAX_C(val);
snippet INTMAX_C
	INTMAX_C(${2:val});${3}
# UINTMAX_C(val);
snippet UINTMAX_C
	UINTMAX_C(${2:val});${3}
# INT8_C(val);
snippet INT8_C
	INT8_C(${2:val});${3}
# INT16_C(val);
snippet INT16_C
	INT16_C(${2:val});${3}
# INT32_C(val);
snippet INT32_C
	INT32_C(${2:val});${3}
# INT64_C(val);
snippet INT64_C
	INT64_C(${2:val});${3}
# UINT8_C(val);
snippet UINT8_C
	UINT8_C(${2:val});${3}
# UINT16_C(val);
snippet UINT16_C
	UINT16_C(${2:val});${3}
# UINT32_C(val);
snippet UINT32_C
	UINT32_C(${2:val});${3}
# UINT64_C(val);
snippet UINT64_C
	UINT64_C(${2:val});${3}
################ include <stdio.h> #################
# int remove(const char *file_name);
snippet remove
	${1:int }remove(${2:const char *file_name});${3}
# int rename(const char *oldname, const char *newname);
snippet rename
	${1:int }rename(${2:const char *oldname}, ${3:const char *newname});${4}
# FILE *tmpfile(void);
snippet tmpfile
	${1:FILE *}tmpfile(void);${2}
# char *tmpnam(char *result);
snippet tmpnam
	${1:char *}tmpnam(${2:char *result});${3}
# int fclose(FILE *stream);
snippet fclose
	${1:int }fclose(${2:FILE *stream});${3}
# int fflush(FILE *stream);
snippet fflush
	${1:int }fflush(${2:FILE *stream});${3}
# FILE *fopen(const char *file_name, const char *opentype);
snippet fopen
	${1:FILE *}fopen(${2:const char *file_name}, ${3:const char *opentype});${4}
# FILE *freopen(const char *file_name, const char *opentype, FILE *stream);
snippet freopen
	${1:FILE *}freopen(${2:const char *file_name}, ${3:const char *opentype}, ${4:FILE *stream});${5}
# void setbuf(FILE *stream, char *buf);
snippet setbuf
	${1:void }setbuf(${2:FILE *stream}, ${3:char *buf});${4}
# int setvbuf(FILE *stream, char *buf, int mode, size_t size);
snippet setvbuf
	${1:int }setvbuf(${2:FILE *stream}, ${3:char *buf}, ${4:int mode}, ${5:size_t size});${6}
# int printf(const char *format, ...);
#snippet printf
#	${1:int }printf(${2:const char *format});${3}
# int fprintf(FILE *stream, const char *format, ...);
#snippet fprintf
#	${1:int }fprintf(${2:FILE *stream}, ${3:const char *format});${4}
# int sprintf(char *s, const char *format, ...);
snippet sprintf
	${1:int }sprintf(${2:char *s}, ${3:const char *format});${4}
# int snprintf(char *s, size_t size, const char *format, ...);
snippet snprintf
	${1:int }snprintf(${2:char *s}, ${3:size_t size}, ${4:const char *format});${5}
# int vprintf(const char *format, va_list ap);
snippet vprintf
	${1:int }vprintf(${2:const char *format}, ${3:va_list ap});${4}
# int vfprintf(FILE *stream, const char *format, va_list ap);
snippet vfprintf
	${1:int }vfprintf(${2:FILE *stream}, ${3:const char *format}, ${4:va_list ap});${5}
# int vsnprintf(char *s, size_t size, const char *format, va_list ap);
snippet vsnprintf
	${1:int }vsnprintf(${2:char *s}, ${3:size_t size}, ${4:const char *format}, ${5:va_list ap});${6}
# int scanf(const char *format, ...);
#snippet scanf
#	${1:int }scanf(${2:const char *format});${3}
# int fscanf(FILE *stream, const char *format, ...);
snippet fscanf
	${1:int }fscanf(${2:FILE *stream}, ${3:const char *format});${4}
# int sscanf(const char *s, const char *format, ...);
snippet sscanf
	${1:int }sscanf(${2:const char *s}, ${3:const char *format});${4}
# int vscanf(const char *format, va_list ap);
snippet vscanf
	${1:int }vscanf(${2:const char *format}, ${3:va_list ap});${4}
# int vfscanf(FILE *stream, const char *format, va_list ap);
snippet vfscanf
	${1:int }vfscanf(${2:FILE *stream}, ${3:const char *format}, ${4:va_list ap});${5}
# int vsscanf(const char *s, const char *format, va_list ap);
snippet vsscanf
	${1:int }vsscanf(${2:FILE *stream}, ${3:const char *format}, ${4:va_list ap});${5}
# int fgetc(FILE *stream);
snippet fgetc
	${1:int }fgetc(${2:FILE *stream});${3}
# char *fgets(char *s, int count, FILE *stream);
snippet fgets
	${1:char *}fgets(${2:char *s}, ${3:int count}, ${4:FILE *stream});${5}
# int getc(FILE *stream);
snippet getc
	${1:int }getc(${2:FILE *stream});${3}
# int getchar(void);
snippet getchar
	${1:int }getchar(void);${2}
# char *gets(char *s);
snippet gets
	${1:char *}gets(${2:char *s});${3}
# int ungetc(int c, FILE *stream);
snippet ungetc
	${1:int }ungetc(${2:int c}, ${3:FILE *stream});${4}
# int fputc(int c, FILE *stream);
snippet fputc
	${1:int }fputc(${2:int c}, ${3:FILE *stream});${4}
# int putc(int c, FILE *stream);
snippet putc
	${1:int }putc(${2:int c}, ${3:FILE *stream});${4}
# int puts(const char *s);
snippet puts
	${1:int }puts(${2:const char *s});${3}
# int putchar(int c);
snippet putchar
	${1:int }putchar(${2:int c});${3}
# size_t fread(void *data, size_t size, size_t count, FILE *stream);
snippet fread
	${1:size_t }fread(${2:void *data}, ${3:size_t size}, ${4:size_t count}, ${5:FILE *stream});${6}
# size_t fwrite(const void *data, size_t size, size_t count, FILE *stream);
snippet fwrite
	${1:size_t }fwrite(${2:const void *data}, ${3:size_t size}, ${4:size_t count}, ${5:FILE *stream});${6}
# int fgetpos(FILE *stream, fpos_t *position);
snippet fgetpos
	${1:int }fgetpos(${2:FILE *stream}, ${3:fpos_t *position});${4}
# int fseek(FILE *stream, long int offset, int whence);
snippet fseek
	${1:int }fseek(${2:FILE *stream}, ${3:long int offset}, ${4:int whence});${5}
# int fsetpos(FILE *stream, const fpos_t *position);
snippet fsetpos
	${1:int }fsetpos(${2:FILE *stream}, ${3:const fpos_t *position});${4}
# long int ftell(FILE *stream);
snippet ftell
	${1:long int }ftell(${2:FILE *stream});${3}
# void rewind(FILE *stream);
snippet rewind
	${1:void }rewind(${2:FILE *stream});${3}
# void clearerr(FILE *stream);
snippet clearerr
	${1:void }clearerr(${2:FILE *stream});${3}
# int feof(FILE *stream);
snippet feof
	${1:int }feof(${2:FILE *stream});${3}
# int ferror(FILE *stream);
snippet ferror
	${1:int }ferror(${2:FILE *stream});${3}
# void perror(const char *msg);
snippet perror
	${1:void }perror(${2:const char *msg});${3}
################ include <stdlib.h> #################
# double atof(const char *string);
snippet atof
	${1:double }atof(${2:const char *string});${3}
# long int atol(const char *string);
snippet atol
	${1:long int }atol(${2:const char *string});${3}
# int atoi(const char *string);
snippet atoi
	${1:int }atoi(${2:const char *string});${3}
# long long int atoll(const char *string);
snippet atoll
	${1:long long int }atoll(${2:const char *string});${3}
# long int strtol(const char *restrict string, char **restrict tailptr, int base);
snippet strtol
	${1:long int }strtol(${2:const char *restrict string}, ${3:char **restrict tailptr}, ${4:int base});${5}
# long long int strtoll(const char *restrict string, char **restrict tailptr, int base);
snippet strtoll
	${1:long long int }strtoll(${2:const char *restrict string}, ${3:char **restrict tailptr}, ${4:int base});${5}
# unsigned long int strtoul(const char *restrict string, char **restrict tailptr, int base);
snippet strtoul
	${1:unsigned long int }strtoul(${2:const char *restrict string}, ${3:char **restrict tailptr}, ${4:int base});${5}
# unsigned long long int strtoull(const char *restrict string, char **restrict tailptr, int base);
snippet strtoull
	${1:unsigned long long int }strtoull(${2:const char *restrict string}, ${3:char **restrict tailptr}, ${4:int base});${5}
# double strtod(const char *restrict string, char **restrict tailptr);
snippet strtod
	${1:double }strtod(${2:const char *restrict string}, ${3:char **restrict tailptr});${4}
# float strtof(const char *string, char **tailptr);
snippet strtof
	${1:float }strtof(${2:const char *string}, ${3:char **tailptr});${4}
# long double strtold(const char *string, char **tailptr);
snippet strtold
	${1:long double }strtold(${2:const char *string}, ${3:char **tailptr});${4}
# int rand(void);
snippet rand
	${1:int }rand(void);${2}
# void srand(unsigned int seed);
snippet srand
	${1:void }srand(${2:unsigned int seed});${3}
# void *calloc(size_t count, size_t eltsize);
snippet calloc
	${1:void *}calloc(${2:size_t count}, ${3:size_t eltsize});${4}
# void free(void *ptr);
snippet free
	${1:void }free(${2:void *ptr});${3}
# void *malloc(size_t size);
snippet malloc
	${1:void *}malloc(${2:size_t size});${3}
# void *realloc(void *ptr, size_t newsize);
snippet realloc
	${1:void *}realloc(${2:void *ptr}, ${3:size_t newsize});${4}
# void abort(void);
snippet abort
	${1:void }abort(void);${2}
# int atexit(void (*function) (void));
snippet atexit
	${1:int }atexit(${2:void (*function) (void)});${3}
# void exit(int status);
snippet exit
	${1:void }exit(${2:int status});${3}
# void _Exit(int status);
snippet _Exit
	${1:void }_Exit(${2:int status});${3}
# char *getenv(const char *name);
snippet getenv
	${1:char *}getenv(${2:const char *name});${3}
# int system(const char *command);
snippet system
	${1:int }system(${2:const char *command});${3}
# void *bsearch(const void *key, const void *array, size_t count, size_t size, int (* compare)(const void *, const void *));
snippet bsearch
	${1:void }bsearch(${2:const void *key}, ${3:const void *array}, ${4:size_t count}, ${5:size_t size}, ${6:int (* compare)(const void *, const void *)});${7}
# void qsort(void *array, size_t count, size_t size, int (* compare)(const void *, const void *));
snippet qsort
	${1:void }qsort(${2:void *array}, ${3:size_t count}, ${4:size_t size}, ${5:int (* compare)(const void *, const void *)});${6}
# int abs(int number);
snippet abs
	${1:int }abs(${2:int number});${3}
# long int labs(long int number);
snippet labs
	${1:long int }labs(${2:long int number});${3}
# div_t div(int numerator, int denominator);
snippet div
	${1:div_t }div(${2:int numerator}, ${3:int denominator});${4}
# ldiv_t ldiv(long int numerator, long int denominator);
snippet ldiv
	${1:ldiv_t }ldiv(${2:long int numerator}, ${3:long int denominator});${4}
# lldiv_t lldiv(long long int numerator, long long int denominator);
snippet lldiv
	${1:lldiv_t }lldiv(${2:long long int numerator}, ${3:long long int denominator});${4}
# int mblen(const char *string, size_t size);
snippet mblen
	${1:int }mblen(${2:const char *string}, ${3:size_t size});${4}
# int mbtowc(wchar_t *restrict result, const char *restrict string, size_t size);
snippet mbtowc
	${1:int }mbtowc(${2:wchar_t *restrict result}, ${3:const char *restrict string}, ${4:size_t size});${5}
# int wctomb(char *string, wchar_t wchar);
snippet wctomb
	${1:int }wctomb(${2:char *string}, ${3:wchar_t wchar});${4}
# size_t mbstowcs(wchar_t *wstring, const char *string, size_t size);
snippet mbstowcs
	${1:size_t }mbstowcs(${2:wchar_t *wstring}, ${3:const char *string}, ${4:size_t size});${5}
# size_t wcstombs(char *string, const wchar_t *wstring, size_t size);
snippet wcstombs
	${1:size_t }wcstombs(${2:char *string}, ${3:const wchar_t *wstring}, ${4:size_t size});${5}
################ include <string.h> #################
# void *memcpy(void *restrict to, const void *restrict from, size_t size);
snippet memcpy
	${1:void *}memcpy(${2:void *restrict to}, ${3:const void *restrict from}, ${4:size_t size});${5}
# void *memmove(void *to, const void *from, size_t size);
snippet memmove
	${1:void *}memmove(${2:void *to}, ${3:const void *from}, ${4:size_t size});${5}
# char *strcpy(char *restrict to, const char *restrict from);
snippet strcpy
	${1:char *}strcpy(${2:char *restrict to}, ${3:const char *restrict from});${4}
# char *strncpy(char *restrict to, const char *restrict from, size_t size);
snippet strncpy
	${1:char *}strncpy(${2:char *restrict to}, ${3:const char *restrict from}, ${4:size_t size});${5}
# char *strcat(char *restrict to, const char *restrict from);
snippet strcat
	${1:char *}strcat(${2:char *restrict to}, ${3:const char *restrict from});${4}
# char *strncat(char *restrict to, const char *restrict from, size_t size);
snippet strncat
	${1:char *}strncat(${2:char *restrict to}, ${3:const char *restrict from}, ${4:size_t size});${5}
# int memcmp(const void *a1, const void *a2, size_t size);
snippet memcmp
	${1:int }memcmp(${2:const void *a1}, ${3:const void *a2}, ${4:size_t size});${5}
# int strcmp(const char *s1, const char *s2);
snippet strcmp
	${1:int }strcmp(${2:const char *s1}, ${3:const char *s2});${4}
# int strcoll(const char *s1, const char *s2);
snippet strcoll
	${1:int }strcoll(${2:const char *s1}, ${3:const char *s2});${4}
# int strncmp(const char *s1, const char *s2, size_t size);
snippet strncmp
	${1:int }strncmp(${2:const char *s1}, ${3:const char *s2}, ${4:size_t size});${5}
# size_t strxfrm(char *restrict to, const char *restrict from, size_t size);
snippet strxfrm
	${1:size_t }strxfrm(${2:char *restrict to}, ${3:const char *restrict from}, ${4:size_t size});${5}
# void *memchr(const void *block, int c, size_t size);
snippet memchr
	${1:void *}memchr(${2:const void *block}, ${3:int c}, ${4:size_t size});${5}
# char *strchr(const char *string, int c);
snippet strchr
	${1:char *}strchr(${2:const char *string}, ${3:int c});${4}
# size_t strcspn(const char *string, const char *stopset);
snippet strcspn
	${1:size_t }strcspn(${2:const char *string}, ${3:const char *stopset});${4}
# char *strpbrk(const char *string, const char *stopset);
snippet strpbrk
	${1:char *}strpbrk(${2:const char *string}, ${3:const char *stopset});${4}
# char *strrchr(const char *string, int c);
snippet strrchr
	${1:char *}strrchr(${2:const char *string}, ${3:int c});${4}
# size_t strspn(const char *string, const char *skipset);
snippet strspn
	${1:size_t }strspn(${2:const char *string}, ${3:const char *skipset});${4}
# char *strstr(const char *haystack, const char *needle);
snippet strstr
	${1:char *}strstr(${2:const char *string}, ${3:const char *skipset});${4}
# char *strtok(char *restrict newstring, const char *restrict delimiters);
snippet strtok
	${1:char *}strtok(${2:char *restrict newstring}, ${3:const char *restrict delimiters});${4}
# void *memset(void *block, int c, size_t size);
snippet memset
	${1:void *}memset(${2:const void *block}, ${3:int c}, ${4:size_t size});${5}
# char *strerror(int errnum);
snippet strerror
	${1:char *}strerrort(${2:int errnum});${3}
# size_t strlen(const char *s)
snippet strlen
	${1:size_t }strlen(${2:const char *s});${3}
################ include <time.h> #################
# clock_t clock(void);
snippet clock
	${1:clock_t }clock(void);${2}
# double difftime(time_t time1, time_t time0);
snippet difftime
	${1:double }difftime(${2:time_t time1}, ${3:time_t time0});${4}
# time_t mktime(struct tm *brokentime);
snippet mktime
	${1:time_t }mktime(${2:struct tm *brokentime});${3}
# time_t time(time_t *result);
snippet time
	${1:time_t }time(${2:time_t *result});${3}
# char *asctime(const struct tm *brokentime);
snippet asctime
	${1:char *}asctime(${2:const struct tm *brokentime});${3}
# char *ctime(const time_t *time);
snippet ctime
	${1:char *}ctime(${2:const time_t *time});${3}
# struct tm *gmtime(const time_t *time);
snippet gmtime
	${1:struct tm *}gmtime(${2:const time_t *time});${3}
# struct tm *localtime (const time_t *time);
snippet localtime
	${1:struct tm *}localtime(${2:const time_t *time});${3}
# size_t strftime(char *s, size_t size, const char *format, const struct tm *brokentime);
snippet strftime
	${1:size_t }strftime(${2:char *s}, ${3:size_t size}, ${4:const char *format}, ${5:const struct tm *brokentime});${6}
################ include <wchar.h> #################
# int wprintf(const wchar_t *format, ...);
snippet wprintf
	${1:int }wprintfe(${2:const wchar_t *format});${3}
# int fwprintf(FILE *stream, const wchar_t *format, ...);
snippet fwprintf
	${1:int }fwprintf(${2:FILE *stream}, ${3:const wchar_t *format});${4}
# int swprintf(wchar_t *s, size_t size, const wchar_t *format, ...);
snippet swprintf
	${1:int }swprintf(${2:wchar_t *s}, ${3:size_t size}, ${4:const wchar_t *format});${5}
# int vwprintf(const wchar_t *format, va_list ap);
snippet vwprintf
	${1:int }vwprintf(${2:const wchar_t *format}, ${3:va_list ap});${4}
# int vfwprintf(FILE *stream, const wchar_t *format, va_list ap);
snippet vfwprintf
	${1:int }vfwprintf(${2:FILE *stream}, ${3:const wchar_t *format}, ${4:va_list ap});${5}
# int vswprintf(wchar_t *s, size_t size, const wchar_t *format, va_list ap);
snippet vswprintf
	${1:int }vswprintf(${2:wchar_t *s}, ${3:size_t size}, ${4:const wchar_t *format}, ${5:va_list ap});${6}
# int wscanf(const wchar_t *format, ...);
snippet wscanf
	${1:int }wscanf(${2:const wchar_t *format});${3}
# int fwscanf(FILE *stream, const wchar_t *format, ...);
snippet fwscanf
	${1:int }fwscanf(${2:FILE *stream}, ${3:const wchar_t *format});${4}
# int swscanf (const wchar_t *ws, const char *format, ...);
snippet swscanf
	${1:int }swscanf(${2:const wchar_t *ws}, ${3:const char *format});${4}
# int vwscanf(const wchar_t *format, va_list ap);
snippet vwscanf
	${1:int }vwscanf(${2:const wchar_t *format}, ${3:va_list ap});${4}
# int vfwscanf(FILE *stream, const wchar_t *format, va_list ap);
snippet vfwscanf
	${1:int }vfwscanf(${2:FILE *stream}, ${3:const wchar_t *format}, ${4:va_list ap});${5}
# int vswscanf(const wchar_t *s, const wchar_t *format, va_list ap);
snippet vswscanf
	${1:int }vswscanf(${2:wchar_t *s}, ${3:const wchar_t *format}, ${4:va_list ap});${5}
# wint_t fgetwc(FILE *stream);
snippet fgetwc
	${1:wint_t }fgetwc(${2:FILE *stream});${3}
# wchar_t *fgetws(wchar_t *ws, int count, FILE *stream);
snippet fgetws
	${1:wchar_t *}fgetws(${2:wchar_t *ws}, ${3:int count}, ${4:FILE *stream});${5}
# wint_t getwc(FILE *stream);
snippet getwc
	${1:wint_t }getwc(${2:FILE *stream});${3}
# wint_t getwchar(void);
snippet getwchar
	${1:wint_t }getwchar(void);${2}
# wint_t ungetwc(wint_t wc, FILE *stream);
snippet ungetwc
	${1:wint_t }ungetwc(${2:wint_t wc}, ${3:FILE *stream});${4}
# wint_t fputwc(wchar_t wc, FILE *stream);
snippet fputwc
	${1:wint_t }fputwc(${2:wint_t wc}, ${3:FILE *stream});${4}
# int fputws(const wchar_t *ws, FILE *stream);
snippet fputws
	${1:int }fputws(${2:wint_t wc}, ${3:FILE *stream});${4}
# wint_t putwc(wchar_t wc, FILE *stream);
snippet putwc
	${1:wint_t }putwc(${2:wint_t wc}, ${3:FILE *stream});${4}
# wint_t putwchar(wchar_t wc);
snippet putwchar
	${1:wint_t }putwchar(${2:wchar_t wc});${3}
# int fwide(FILE *stream, int mode);
snippet fwide
	${1:int }fwide(${2:FILE *stream}, ${3:int mode});${4}
# double wcstod(const wchar_t *restrict string, wchar_t **restrict tailptr);
snippet wcstod
	${1:double }wcstod(${2:const wchar_t *restrict string}, ${3: wchar_t **restrict tailptr});${4}
# float wcstof(const wchar_t *string, wchar_t **tailptr);
snippet wcstof
	${1:float }wcstof(${2:const wchar_t string}, ${3: wchar_t **tailptr});${4}
# long double wcstold(const wchar_t *string, wchar_t **tailptr);
snippet wcstold
	${1:long double }wcstold(${2:const wchar_t string}, ${3: wchar_t **tailptr});${4}
# long int wcstol(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstol
	${1:long int }wcstol(${2:const wchar_t *restrict string}, ${3:wchar_t **restrict tailptr}, ${4:int base});${5}
# long long int wcstoll(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstoll
	${1:long long int }wcstoll(${2:const wchar_t *restrict string}, ${3:wchar_t **restrict tailptr}, ${4:int base});${5}
# unsigned long int wcstoul(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstoul
	${1:unsigned long int }wcstoul(${2:const wchar_t *restrict string}, ${3:wchar_t **restrict tailptr}, ${4:int base});${5}
# unsigned long long int wcstoull(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstoull
	${1:unsigned long long int }wcstoull(${2:const wchar_t *restrict string}, ${3:wchar_t **restrict tailptr}, ${4:int base});${5}
# wchar_t *wcscpy(wchar_t *restrict wto, const wchar_t *restrict wfrom);
snippet wcscpy
	${1:wchar_t *}wcscpy(${2:wchar_t *restrict wto}, ${3:const wchar_t *restrict wfrom});${4}
# wchar_t *wcsncpy(wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size);
snippet wcsncpy
	${1:wchar_t *}wcsncpy(${2:wchar_t *restrict wto}, ${3:const wchar_t *restrict wfrom}, ${4:size_t size});${5}
# wchar_t *wmemcpy(wchar_t *restrict wto, const wchar_t *restruct wfrom, size_t size);
snippet wmemcpy
	${1:wchar_t *}wmemcpy(${2:wchar_t *restrict wto}, ${3:const wchar_t *restrict wfrom}, ${4:size_t size});${5}
# wchar_t *wmemmove(wchar *wto, const wchar_t *wfrom, size_t size);
snippet wmemmove
	${1:wchar_t *}wmemmove(${2:wchar *wto}, ${3:const wchar_t *wfrom}, ${4:size_t size});${5}
# wchar_t *wcscat(wchar_t *restrict wto, const wchar_t *restrict wfrom);
snippet wcscat
	${1:wchar_t *}wcscat(${2:wchar_t *restrict wto}, ${3:const wchar_t *restrict wfrom});${4}
# wchar_t *wcsncat(wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size);
snippet wcsncat
	${1:wchar_t *}wcsncat(${2:wchar_t *restrict wto}, ${3:const wchar_t *restrict wfrom}, ${4:size_t size});${5}
# int wcscmp(const wchar_t *ws1, const wchar_t *ws2);
snippet wcscmp
	${1:int }wcscmp(${2:const wchar_t *ws1}, ${3:const wchar_t *ws2});${4}
# int wcscoll(const wchar_t *ws1, const wchar_t *ws2);
snippet wcscoll
	${1:int }wcscoll(${2:const wchar_t *ws1}, ${3:const wchar_t *ws2});${4}
# int wcsncmp(const wchar_t *ws1, const wchar_t *ws2, size_t size);
snippet wcsncmp
	${1:int }wcsncmp(${2:const wchar_t *ws1}, ${3:const wchar_t *ws2}, ${4:size_t size});${5}
# size_t wcsxfrm(wchar_t *restrict wto, const wchar_t *wfrom, size_t size);
snippet wcsxfrm
	${1:size_t }wcsxfrm(${2:wchar_t *restrict wto}, ${3: const wchar_t *wfrom}, ${4:size_t size});${5}
# int wmemcmp(const wchar_t *a1, const wchar_t *a2, size_t size);
snippet wmemcmp
	${1:int }wmemcmp(${2:const wchar_t *a1}, ${3: const wchar_t *a2}, ${4:size_t size});${5}
# wchar_t *wcschr(const wchar_t *wstring, int wc);
snippet wcschr
	${1:wchar_t *}wcschr(${2:const wchar_t *wstring}, ${3:int wc});${4}
# size_t wcscspn(const wchar_t *wstring, const wchar_t *stopset);
snippet wcscspn
	${1:size_t }wcscspn(${2:const wchar_t *wstring}, ${3:const wchar_t *stopset});${4}
# wchar_t *wcspbrk (const wchar_t *wstring, const wchar_t *stopset);
snippet wcspbrk
	${1:wchar_t *}wcspbrk(${2:const wchar_t *wstring}, ${3:const wchar_t *stopset});${4}
# wchar_t *wcsrchr (const wchar_t *wstring, wchar_t c);
snippet wcsrchr
	${1:wchar_t *}wcsrchr(${2:const wchar_t *wstring}, ${3:wchar_t c});${4}
# size_t wcsspn(const wchar_t *wstring, const wchar_t *skipset);
snippet wcsspn
	${1:size_t }wcsspn(${2:const wchar_t *wstring}, ${3:const wchar_t *skipset});${4}
# wchar_t *wcsstr(const wchar_t *haystack, const wchar_t *needle);
snippet wcsstr
	${1:wchar_t *}wcsstr(${2:const wchar_t *haystack}, ${3:const wchar_t *needle});${4}
# wchar_t *wcstok(wchar_t *newstring, const char *delimiters);
snippet wcstok
	${1:wchar_t *}wcstok(${2:wchar_t *newstring}, ${3:const char *delimiters});${4}
# wchar_t *wmemchr(const wchar_t *block, wchar_t wc, size_t size);
snippet wmemchr
	${1:wchar_t *}wmemchr(${2:const wchar_t *block}, ${3: wchar_t wc}, ${4:size_t size});${5}
# size_t wcslen(const wchar_t *ws);
snippet wcslen
	${1:size_t }wcslen(${2:const wchar_t *ws});${3}
# wchar_t *wmemset(wchar_t *block, wchar_t wc, size_t size);
snippet wmemset
	${1:wchar_t *}wmemset(${2:wchar_t *block}, ${3: wchar_t wc}, ${4:size_t size});${5}
# size_t wcsftime(wchar_t *s, size_t size, const wchar_t *template, const struct tm *brokentime);
snippet wcsftime
	${1:size_t }wcsftime(${2:wchar_t *s}, ${3:size_t size}, ${4:const wchar_t *template}, ${5:const struct tm *brokentime});${6}
# wint_t btowc(int c);
snippet btowc
	${1:wint_t }btowc(${2:int c});${3}
# int wctob(wint_t c);
snippet wctob
	${1:int }wctob(${2:wint_t c});${3}
# int mbsinit(const mbstate_t *ps);
snippet mbsinit
	${1:int }mbsinit(${2:const mbstate_t *ps});${3}
# size_t mbrlen(const char *restrict s, size_t n, mbstate_t *ps);
snippet mbrlen
	${1:size_t }mbrlen(${2:const char *restrict s}, ${3: size_t n}, ${4:mbstate_t *ps});${5}
# size_t mbrtowc(wchar_t *restrict pwc, const char *restrict s, size_t n, mbstate_t *restrict ps);
snippet mbrtowc
	${1:size_t }mbrtowc(${2:wchar_t *restrict pwc}, ${3:const char *restrict s}, ${4:size_t n}, ${5:mbstate_t *restrict ps});${6}
# size_t wcrtomb(char *restrict s, wchar_t wc, mbstate_t *restrict ps);
snippet wcrtomb
	${1:size_t }wcrtomb(${2:char *restrict s}, ${3:wchar_t wc}, ${4:mbstate_t *restrict ps});${5}
# size_t mbsrtowcs(wchar_t *restrict dst, const char **restrict src, size_t len, mbstate_t *restrict ps);
snippet mbsrtowcs
	${1:size_t }mbsrtowcs(${2:wchar_t *restrict dst}, ${3:const char **restrict src}, ${4:size_t len}, ${5:mbstate_t *restrict ps});${6}
# size_t wcsrtombs(char *restrict dst, const wchar_t **restrict src, size_t len, mbstate_t *restrict ps);
snippet wcsrtombs
	${1:size_t }wcsrtombs(${2:char *restrict dst}, ${3:const wchar_t **restrict src}, ${4:size_t len}, ${5:mbstate_t *restrict ps});${6}
################ include <wctype.h> #################
# int iswalnum(wint_t wc);
snippet iswalnum
	${1:int }iswalnum(${2:wint_t wc});${3}
# int iswalpha(wint_t wc);
snippet iswalpha
	${1:int }iswalpha(${2:wint_t wc});${3}
# int iswblank(wint_t wc);
snippet iswblank
	${1:int }iswblank(${2:wint_t wc});${3}
# int iswcntrl(wint_t wc);
snippet iswcntrl
	${1:int }iswcntrl(${2:wint_t wc});${3}
# int iswdigit(wint_t wc);
snippet iswdigit
	${1:int }iswdigit(${2:wint_t wc});${3}
# int iswgraph(wint_t wc);
snippet iswgraph
	${1:int }iswgraph(${2:wint_t wc});${3}
# int iswlower(wint_t wc);
snippet iswlower
	${1:int }iswlower(${2:wint_t wc});${3}
# int iswprint(wint_t wc);
snippet iswprint
	${1:int }iswprint(${2:wint_t wc});${3}
# int iswpunct(wint_t wc);
snippet iswpunct
	${1:int }iswpunct(${2:wint_t wc});${3}
# int iswspace(wint_t wc);
snippet iswspace
	${1:int }iswspace(${2:wint_t wc});${3}
# int iswupper(wint_t wc);
snippet iswupper
	${1:int }iswupper(${2:wint_t wc});${3}
# int iswxdigit(wint_t wc);
snippet iswxdigit
	${1:int }iswxdigit(${2:wint_t wc});${3}
# int iswctype(wint_t wc, wctype_t desc);
snippet iswctype
	${1:int }iswctype(${2:wint_t wc}, ${3:wctype_t desc});${4}
# wctype_t wctype(const char *property);
snippet wctype
	${1:wctype_t }wctype(${2:const char *property});${3}
# wint_t towlower(wint_t wc);
snippet towlower
	${1:wint_t }towlower(${2:wint_t wc});${3}
# wint_t towupper(wint_t wc);
snippet towupper
	${1:wint_t }towupper(${2:wint_t wc});${3}
# wint_t towctrans(wint_t wc, wctrans_t desc);
snippet towctrans
	${1:wint_t }towctrans(${2:wint_t wc}, ${3:wctrans_t desc});${4}
# wctrans_t wctrans(const char *property);
snippet wctrans
	${1:wctrans_t }wctrans(${2:const char *property});${3}

######################################################
# Default-snippets
######################################################

# main()
snippet main
	int main(int argc, char const* argv[]) {
		${1}
		fflush(stdout);
		if (ferror(stdout)) exit(EXIT_FAILURE);
		return EXIT_SUCCESS;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet incl
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet ifndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define 
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
	
	#define $1
	
	${2}
	
	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet else
	else {
		${1:/* code */}
	}
snippet elseif
	elseif {
		${1:/* code */}
	}
# Tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for #normal
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Custom For Loop
snippet for #second parameter
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3:void}) {
		${4:/* code */}
	}
# Typedef
snippet typedef
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet struct
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet typedefs
	typedef struct ${2:$1 } {
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};

snippet printf
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fprintf
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
#scanf
snippet scanf
	scanf("%${1:s}", &${2:string});${3}


######################################################
# Extra-snippets
######################################################
# large comment
snippet /***
	/**********************************************************************
	 * ${1:An interesting and long comment}
	 *********************************************************************/${2}
# title comment const char *restrict s
snippet /**
	/*****************************${1:Title}********************************/${2}
# standard comment
snippet /*
	/* ${1:Short comment} */${2}
# elegant comment
snippet /*_
	/* ${1:Comment}
	 */${2}
# switch, it would be great if switch could expands itself :[
snippet switch
	switch (${1:/* expression */}) {
		case ${2:/* constant */}: ${3:/* code */};
			${4:break};${6}
		default: ${5:/* more code */};
			break;
	}
# prototype
snippet function
	${1:void} ${2:function_name}(${3:void});
# return
snippet return
	return(${1:EXIT_SUCCESS});${2}
snippet header
	#============================================================================
	#
	#          FILE:  `expand('%')`
	#
	#   DESCRIPTION:  ${1:---}
	#
	#        AUTHOR:  ${2:`g:snips_author`} ${3:<`g:snips_authorEmail`>}
	#       COMPANY:  ${4:---}
	#      COMPILER:  ${5:gcc}
	#       CREATED:  `strftime("%d-%m-%Y %H:%M")`
	#      REVISION:  ${6:---}
	#============================================================================
	${11}
