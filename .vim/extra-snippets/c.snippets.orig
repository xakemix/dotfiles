######################################################
#   Functions from the "C-Reference for Vim" plugin
#    based on  "The GNU C Library Reference Manual"
######################################################

################ include <assert.h> ##################
# void assert (int expression);
snippet assert
	assert(${1:int expression});${2}
################ include <complex.h> #################
# double cabs(double complex z);
snippet cabs
	cabs(${1:double complex z});${2}
# float cabsf(float complex z);
snippet cabsf
	cabsf(${1:float complex z});${2}
# long double cabsl(long double complex z);
snippet cabsl
	cabsl(${1:long double complex z});${2}
# double complex cpow(double complex base, double complex power);
snippet cpow
	cpow(${1:double complex base}, ${2:double complex power});${3}
# float complex cpowf(float complex base, double complex power);
snippet cpowf
	cpowf(${1:float complex base}, ${2:double complex power});${3}
# long double complex cpowl(long double complex base, long double complex power);
snippet cpowl
	cpowl(${1:long double complex base}, ${2:long double complex power});${3}
# double complex csqrt(double complex z);
snippet csqrt
	csqrt(${1:double complex z});${2}
# float complex csqrtf(float complex z);
snippet csqrtf
	csqrtf(${1:float complex z});${2}
# long double complex csqrtl(long double complex z);
snippet csqrtl
	csqrtl(${1:long double complex z});${2}
# double carg(double complex z);
snippet carg
	carg(${1:double complex z});${2}
# float cargf(float complex z);$
snippet cargf
	cargf(${1:float complex z});${2}
# long double cargl(long double complex z);
snippet cargl
	cargl(${1:long double complex z});${2}
# double cimag(double complex z);
snippet cimag
	cimag(${1:double complex z});${2}
# float cimagf(float complex z);
snippet cimagf
	cimagf(${1:float complex z});${2}
# long double cimagl(long double complex z);
snippet cimagl
	cimagl(${1:long double complex z});${2}
# double complex conj(double complex z);
snippet conj
	conj(${1:double complex z});${2}
# float complex conjf(float complex z);
snippet conjf
	conjf(${1:float complex z});${2}
# long double complex conjl(long double complex z);
snippet conjl
	conjl(${1:long double complex z});${2}
# double complex cproj(double complex z);
snippet cproj
	cproj(${1:double complex z});${2}
# float complex cprojf(float complex z);
snippet cprojf
	cprojf(${1:float complex z});${2}
# long double complex cprojl(long double complex z);
snippet cprojl
	cprojl(${1:long double complex z});${2}
# double creal(double complex z);
snippet creal
	creal(${1:double complex z});${2}
# float crealf(float complex z);
snippet crealf
	crealf(${1:float complex z});${2}
# long double creall(long double complex z);
snippet creall
	creall(${1:long double complex z});${2}
################ include <ctype.h> #################
# int isalnum(int c);
snippet isalnum
	isalnum(${1:int c});${2}
# int isalpha(int c);
snippet isalpha
	isalpha(${1:int c});${2}
# int isblank(int c);
snippet isblank
	isblank(${1:int c});${2}
# int iscntrl(int c);
snippet iscntrl
	iscntrl(${1:int c});${2}
# int isdigit(int c);
snippet isdigit
	isdigit(${1:int c});${2}
# int isgraph(int c);
snippet isgraph
	isgraph(${1:int c});${2}
# int islower(int c);
snippet islower
	islower(${1:int c});${2}
# int isprint(int c);
snippet isprint
	isprint(${1:int c});${2}
# int ispunct(int c);
snippet ispunct
	ispunct(${1:int c});${2}
# int isspace(int c);
snippet isspace
	isspace(${1:int c});${2}
# int isupper(int c);
snippet isupper
	isupper(${1:int c});${2}
# int isxdigit(int c);
snippet isxdigit
	isxdigit(${1:int c});${2}
# int tolower(int c);
snippet tolower
	tolower(${1:int c});${2}
# int toupper(int c);
snippet toupper
	toupper(${1:int c});${2}
################ include <fenv.h> #################
# int feclearexcept(int excepts);
snippet feclearexcept
	feclearexcept(${1:int excepts});${2}
# int fegetexceptflag(fexcept_t *flagp, int excepts);
snippet fegetexceptflag
	fegetexceptflag(${1:fexcept_t *flagp}, ${2:int excepts});${3}
# int feraiseexcept(int excepts);
snippet feraiseexcept
	feraiseexcept(${1:int excepts});${2}
# int fesetexceptflag(fexcept_t *flagp, int excepts);
snippet fesetexceptflag
	fesetexceptflag(${1:fexcept_t *flagp}, ${2:int excepts});${3}
# int fetestexcept(int excepts);
snippet fetestexcept
	fetestexcept(${1:int excepts});${2}
# int fegetround(void);
snippet fegetround
	fegetround(void);${1}
# int fesetround(int round);
snippet fesetround
	fesetround(${1:int round});${2}
# int fegetenv(fenv_t *envp);
snippet fegetenv
	fegetenv(${1:fenv_t *envp});${2}
# int feholdexcept(fenv_t *envp);
snippet feholdexcept
	feholdexcept(${1:fenv_t *envp});${2}
# int fesetenv(const fenv_t *envp);
snippet fesetenv
	fesetenv(${1:const fenv_t *envp});${2}
# int feupdateenv(const fenv_t *envp);
snippet feupdateenv
	feupdateenv(${1:const fenv_t *envp});${2}
################ include <inttypes.h> #################
# intmax_t imaxabs(intmax_t j);
snippet imaxabs
	imaxabs(${1:intmax_t j});${2}
# intdiv_t imaxdiv(intmax_t numerator, intmax_t denominator );
snippet imaxdiv
	imaxdiv(${1:intmax_t numerator}, ${2:intmax_t denominator});${3}
# intmax_t strtoimax(const char *restrict string, char **restrict tailptr, int base);
snippet strtoimax
	strtoimax(${1:const char *restrict string}, ${2:char **restrict tailptr}, ${3:int base});${4}
# uintmax_t strtoumax(const char *restrict string, char **restrict tailptr, int base);
snippet strtoumax
	strtoumax(${1:const char *restrict string}, ${2:char **restrict tailptr}, ${3:int base});${4}
# wchar_t wcstoimax(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstoimax
	wcstoimax(${1:const wchar_t *restrict string}, ${2:wchar_t **restrict tailptr}, ${3:int base});${4}
# wchar_t wcstoumax(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstoumax
	wcstoumax(${1:const wchar_t *restrict string}, ${2:wchar_t **restrict tailptr}, ${3:int base});${4}
################ include <local.h> #################
# struct lconv *localeconv(void);
snippet localeconv
	localeconv(void);${1}
# char *setlocale(int category, const char *locale);
snippet setlocale
	setlocale(${1:int category}, ${2:const char *locale});${3}
################ include <math.h> #################
# int fpclassify(float x);
snippet fpclassify
	fpclassify(${1:float x});${2}
# int isfinite(float x);
snippet isfinite
	isfinite(${1:float x});${2}
# int isnormal(float x);
snippet isnormal
	isnormal(${1:float x});${2}
# int isnan(float x);
snippet isnan
	isnan(${1:float x});${2}
# int isinf(float x);
snippet isinf
	isinf(${1:float x});${2}
# int isgreater(float x, float y);
snippet isgreater
	isgreater(${1:float x}, ${2:float y});${3}
# int isgreaterequal(float x, float y);
snippet isgreaterequal
	isgreaterequal(${1:float x}, ${2:float y});${3}
# int isless(float x, float y);
snippet isless
	isless(${1:float x}, ${2:float y});${3}
# int islessequal(float x, float y);
snippet islessequal
	islessequal(${1:float x}, ${2:float y});${3}
# int islessgreater(float x, float y);
snippet islessgreater
	islessgreater(${1:float x}, ${2:float y});${3}
# int isunordered(float x, float y);
snippet isunordered
	isunordered(${1:float x}, ${2:float y});${3}
# double asin(double x);
snippet asin
	asin(${1:double x});${2}
# float asinf(float x);
snippet asinf
	asinf(${1:float x});${2}
# long double asinl(long double x);
snippet asinl
	asinl(${1:long double x});${2}
# double acos(double x);
snippet acos
	acos(${1:double x});${2}
# float acosf(float x);
snippet acosf
	acosf(${1:float x});${2}
# long double acosl(long double x);
snippet acosl
	acosl(${1:long double x});${2}
# double atan(double x);
snippet atan
	atan(${1:double x});${2}
# float atanf(float x);
snippet atanf
	atanf(${1:float x});${2}
# long double atanl(long double x);
snippet atanl
	atanl(${1:long double x});${2}
# double atan2(double x);
snippet atan2
	atan2(${1:double x});${2}
# float atan2f(float x);
snippet atan2f
	atan2f(${1:float x});${2}
# long double atan2l(long double x);
snippet atan2l
	atan2l(${1:long double x});${2}
# double sin(double x);
snippet sin
	sin(${1:double x});${2}
# float sinf(float x);
snippet sinf
	sinf(${1:float x});${2}
# long double sinl(long double x);
snippet sinl
	sinl(${1:long double x});${2}
# double cos(double x);
snippet cos
	cos(${1:double x});${2}
# float cosf(float x);
snippet cosf
	cosf(${1:float x});${2}
# long double cosl(long double x);
snippet cosl
	cosl(${1:long double x});${2}
# double tan(double x);
snippet tan
	tan(${1:double x});${2}
# float tanf(float x);
snippet tanf
	tanf(${1:float x});${2}
# long double tanl(long double x);
snippet tanl
	tanl(${1:long double x});${2}
# double sinh(double x);
snippet sinh
	sinh(${1:double x});${2}
# float sinhf(float x);
snippet sinhf
	sinhf(${1:float x});${2}
# long double sinhl(long double x);
snippet sinhl
	sinhl(${1:long double x});${2}
# double cosh(double x);
snippet cosh
	cosh(${1:double x});${2}
# float coshf(float x);
snippet coshf
	coshf(${1:float x});${2}
# long double coshl(long double x);
snippet coshl
	coshl(${1:long double x});${2}
# double tanh(double x);
snippet tanh
	tanh(${1:double x});${2}
# float tanhf(float x);
snippet tanhf
	tanhf(${1:float x});${2}
# long double tanhl(long double x);
snippet tanhl
	tanhl(${1:long double x});${2}
# double asinh(double x);
snippet asinh
	asinh(${1:double x});${2}
# float asinhf(float x);
snippet asinhf
	asinhf(${1:float x});${2}
# long double asinhl(long double x);
snippet asinhl
	asinhl(${1:long double x});${2}
# double acosh(double x);
snippet acosh
	acosh(${1:double x});${2}
# float acoshf(float x);
snippet acoshf
	acoshf(${1:float x});${2}
# long double acoshl(long double x);
snippet acoshl
	acoshl(${1:long double x});${2}
# double atanh(double x);
snippet atanh
	atanh(${1:double x});${2}
# float atanhf(float x);
snippet atanhf
	atanhf(${1:float x});${2}
# long double atanhl(long double x);
snippet atanhl
	atanhl(${1:long double x});${2}
# double exp(double x);
snippet exp
	exp(${1:double x});${2}
# float expf(float x);
snippet expf
	expf(${1:float x});${2}
# long double expl(long double x);
snippet expl
	expl(${1:long double x});${2}
# double exp2(double x);
snippet exp2
	exp2(${1:double x});${2}
# float exp2f(float x);
snippet exp2f
	exp2f(${1:float x});${2}
# long double exp2l(long double x);
snippet exp2l
	exp2l(${1:long double x});${2}
# double expm1(double x);
snippet expm1
	expm1(${1:double x});${2}
# float expm1f(float x);
snippet expm1f
	expm1f(${1:float x});${2}
# long double expm1l(long double x);
snippet expm1l
	expm1l(${1:long double x});${2}
# int ilogb(double x);
snippet ilogb
	ilogb(${1:double x});${2}
# int ilogbf(float x);
snippet ilogbf
	ilogbf(${1:float x});${2}
# int ilogbl(long double x);
snippet ilogbl
	ilogbl(${1:long double x});${2}
# double log(double x);
snippet log
	log(${1:double x});${2}
# float logf(float x);
snippet logf
	logf(${1:float x});${2}
# long double logl(long double x);
snippet logl
	logl(${1:long double x});${2}
# double log10(double x);
snippet log10
	log10(${1:double x});${2}
# float log10f(float x);
snippet log10f
	log10f(${1:float x});${2}
# long double log10l(long double x);
snippet log10l
	log10l(${1:long double x});${2}
# double log1p(double x);
snippet log1p
	log1p(${1:double x});${2}
# float log1pf(float x);
snippet log1pf
	log1pf(${1:float x});${2}
# long double log1pl(long double x);
snippet log1pl
	log1pl(${1:long double x});${2}
# double log2(double x);
snippet log2
	log2(${1:double x});${2}
# float log2f(float x);
snippet log2f
	log2f(${1:float x});${2}
# long double log2l(long double x);
snippet log2l
	log2l(${1:long double x});${2}
# double logb(double x);
snippet logb
	logb(${1:double x});${2}
# float logbf(float x);
snippet logbf
	logbf(${1:float x});${2}
# long double logbl(long double x);
snippet logbl
	logbl(${1:long double x});${2}
# double frexp(double x, int *exponent);
snippet frexp
	frexp(${1:double x}, ${2:int *exponent});${3}
# float frexpf(float x, int *exponent);
snippet frexpf
	frexpf(${1:float x}, ${2:int *exponent});${3}
# long double frexpl(long double x, int *exponent);
snippet frexpl
	frexpl(${1:long double x}, ${2:int *exponent});${3}
# double ldexp(double x, int exponent);
snippet ldexp
	ldexp(${1:double x}, ${2:int exponent});${3}
# float ldexpf(float x, int exponent);
snippet ldexpf
	ldexpf(${1:float x}, ${2:int exponent});${3}
# long double ldexpl(long double x, int exponent);
snippet ldexpl
	ldexpl(${1:long double x}, ${2:int exponent});${3}
# double modf(double x, double *intpart);
snippet modf
	modf(${1:double x}, ${2:double *intpart});${3}
# float modff(float x, float *intpart);
snippet modff
	modff(${1:float x}, ${2:float *intpart});${3}
# long double modfl(long double x, long double *intpart);
snippet modfl
	modfl(${1:long double x}, ${2:long double *intpart});${3}
# double scalbn(double x, int n);
snippet scalbn
	scalbn(${1:double x}, ${2:int n});${3}
# float scalbnf(float x, int n);
snippet scalbnf
	scalbnf(${1:float x}, ${2:int n});${3}
# long double scalbnl(long double x, int n);
snippet scalbnl
	scalbnl(${1:long double x}, ${2:int n});${3}
# double scalbln(double x, long int n);
snippet scalbln
	scalbln(${1:double x}, ${2:long int n});${3}
# float scalblnf(float x, long int n);
snippet scalblnf
	scalblnf(${1:float x}, ${2:long int n});${3}
# long double scalblnl(long double x, long int n);
snippet scalblnl
	scalblnl(${1:long double x}, ${2:long int n});${3}
# double cbrt(double x);
snippet cbrt
	cbrt(${1:double x});${2}
# float cbrtf(float x);
snippet cbrtf
	cbrtf(${1:float x});${2}
# long double cbrtl(long double x);
snippet cbrtl
	cbrtl(${1:long double x});${2}
# double fabs(double x);
snippet fabs
	fabs(${1:double x});${2}
# float fabsf(float x);
snippet fabsf
	fabsf(${1:float x});${2}
# long double fabsl(long double x);
snippet fabsl
	fabsl(${1:long double x});${2}
# double hypot(double x, double y);
snippet hypot
	hypot(${1:double x}, ${2:double y});${3}
# float hypotf(float x, float y);
snippet hypotf
	hypotf(${1:float x}, ${2:float y});${3}
# long double hypotl(long double x, long double y);
snippet hypotl
	hypotl(${1:long double x}, ${2:long double y});${3}
# double pow(double x, double y);
snippet pow
	pow(${1:double x}, ${2:double y});${3}
# float powf(float x, float y);
snippet powf
	powf(${1:float x}, ${2:float y});${3}
# long double powl(long double x, long double y);
snippet powl
	powl(${1:long double x}, ${2:long double y});${3}
# double sqrt(double x);
snippet sqrt
	sqrt(${1:double x});${2}
# float sqrtf(float x);
snippet sqrtf
	sqrtf(${1:float x});${2}
# long double sqrtl(long double x);
snippet sqrtl
	sqrtl(${1:long double x});${2}
# double erf(double x);
snippet erf
	erf(${1:double x});${2}
# float erff(float x);
snippet erff
	erff(${1:float x});${2}
# long double erfl(long double x);
snippet erfl
	erfl(${1:long double x});${2}
# double erfc(double x);
snippet erfc
	erfc(${1:double x});${2}
# float erfcf(float x);
snippet erfcf
	erfcf(${1:float x});${2}
# long double erfcl(long double x);
snippet erfcl
	erfcl(${1:long double x});${2}
# double lgamma(double x);
snippet lgamma
	lgamma(${1:double x});${2}
# float lgammaf(float x);
snippet lgammaf
	lgammaf(${1:float x});${2}
# long double lgammal(long double x);
snippet lgammal
	lgammal(${1:long double x});${2}
# double tgamma(double x);
snippet tgamma
	tgamma(${1:double x});${2}
# float tgammaf(float x);
snippet tgammaf
	tgammaf(${1:float x});${2}
# long double tgammal(long double x);
snippet tgammal
	tgammal(${1:long double x});${2}
# double ceil(double x);
snippet ceil
	ceil(${1:double x});${2}
# float ceilf(float x);
snippet ceilf
	ceilf(${1:float x});${2}
# long double ceill(long double x);
snippet ceill
	ceill(${1:long double x});${2}
# double floor(double x);
snippet floor
	floor(${1:double x});${2}
# float floorf(float x);
snippet floorf
	floorf(${1:float x});${2}
# long double floorl(long double x);
snippet floorl
	floorl(${1:long double x});${2}
# double trunc(double x);
snippet trunc
	trunc(${1:double x});${2}
# float truncf(float x);
snippet truncf
	truncf(${1:float x});${2}
# long double truncl(long double x);
snippet truncl
	truncl(${1:long double x});${2}
# double rint(double x);
snippet rint
	rint(${1:double x});${2}
# float rintf(float x);
snippet rintf
	rintf(${1:float x});${2}
# long double rintl(long double x);
snippet rintl
	rintl(${1:long double x});${2}
# double nearbyint(double x);
snippet nearbyint
	nearbyint(${1:double x});${2}
# float nearbyintf(float x);
snippet nearbyintf
	nearbyintf(${1:float x});${2}
# long double nearbyintl(long double x);
snippet nearbyintl
	nearbyintl(${1:long double x});${2}
# double round(double x);
snippet round
	round(${1:double x});${2}
# float roundf(float x);
snippet roundf
	roundf(${1:float x});${2}
# long double roundl(long double x);
snippet roundl
	roundl(${1:long double x});${2}
# long int lrint(double x);
snippet lrint
	lrint(${1:double x});${2}
# long int lrintf(float x);
snippet lrintf
	lrintf(${1:float x});${2}
# long int lrintl(long double x);
snippet lrintl
	lrintl(${1:long double x});${2}
# long long int llrint(double x);
snippet llrint
	llrint(${1:double x});${2}
# long long int llrintf(float x);
snippet llrintf
	llrintf(${1:float x});${2}
# long long int llrintl(long double x);
snippet llrintl
	llrintl(${1:long double x});${2}
# long int lround(double x);
snippet lround
	lround(${1:double x});${2}
# long int lroundf(float x);
snippet lroundf
	lroundf(${1:float x});${2}
# long int lroundl(long double x);
snippet lroundl
	lroundl(${1:long double x});${2}
# long long int llround(double x);
snippet llround
	llround(${1:double x});${2}
# long long int llroundf(float x);
snippet llroundf
	llroundf(${1:float x});${2}
# long long int llroundl(long double x);
snippet llroundl
	llroundl(${1:long double x});${2}
# double fmod(double x, double y);
snippet fmod
	fmod(${1:double x}, ${2:double y});${3}
# float fmodf(float x, float y);
snippet fmodf
	fmodf(${1:float x}, ${2:float y});${3}
# long double fmodl(long double x, long double y);
snippet fmodl
	fmodl(${1:long double x}, ${2:long double y});${3}
# double remainder(double x, double y);
snippet remainder
	remainder(${1:double x}, ${2:double y});${3}
# float remainderf(float x, float y);
snippet remainderf
	remainderf(${1:float x}, ${2:float y});${3}
# long double remainderl(long double x, long double y);
snippet remainderl
	remainderl(${1:long double x}, ${2:long double y});${3}
# double remquo(double x, double y, int *quo);
snippet remquo
	remquo(${1:double x}, ${2:double y}, ${3:int *quo});${4}
# float remquof(float x, float y, int *quo);
snippet remquof
	remquof(${1:float x}, ${2:float y}, ${3:int *quo});${4}
# long double remquol(long double x, long double y, int *quo);
snippet remquol
	remquol(${1:long double x}, ${2:long double y}, ${3:int *quo});${4}
# double copysign(double x, double y);
snippet copysign
	copysign(${1:double x}, ${2:double y});${3}
# float copysignf(float x, float y);
snippet copysignf
	copysignf(${1:float x}, ${2:float y});${3}
# long double copysignl(long double x, long double y);
snippet copysignl
	copysignl(${1:long double x}, ${2:long double y});${3}
# int signbit(float-type x);
snippet signbit
	signbit(${1:float-type x});${2}
# double nextafter(double x, double y);
snippet nextafter
	nextafter(${1:double x}, ${2:double y});${3}
# float nextafterf(float x, float y);
snippet nextafterf
	nextafterf(${1:float x}, ${2:float y});${3}
# long double nextafetl(long double x, long double y);
snippet nextafetl
	nextafetl(${1:long double x}, ${2:long double y});${3}
# double nexttoward(double x, long double y);
snippet nexttoward
	nexttoward(${1:double x}, ${2:long double y});${3}
# float nexttowardf(float x, long double y);
snippet nexttowardf
	nexttowardf(${1:float x}, ${2:long double y});${3}
# long double nexttowardl(long double x, long double y);
snippet nexttowardl
	nexttowardl(${1:long double x}, ${2:long double y});${3}
# double nan(const char *tagp);
snippet nan
	nan(${1:const char *tagp});${2}
# float nanf(const char *tagp);
snippet nanf
	nanf(${1:const char *tagp});${2}
# long double nanl(const char *tagp);
snippet nanl
	nanl(${1:const char *tagp});${2}
# double fdim(double x, double y);
snippet fdim
	fdim(${1:double x}, ${2:double y});${3}
# float fdimf(float x, float y);
snippet fdimf
	fdimf(${1:float x}, ${2:float y});${3}
# long double fdiml(long double x, long double y);
snippet fdiml
	fdiml(${1:long double x}, ${2:long double y});${3}
# double fmin(double x, double y);
snippet fmin
	fmin(${1:double x}, ${2:double y});${3}
# float fminf(float x, float y);
snippet fminf
	fminf(${1:float x}, ${2:float y});${3}
# long double fminl(long double x, long double y);
snippet fminl
	fminl(${1:long double x}, ${2:long double y});${3}
# double fmax(double x, double y);
snippet fmax
	fmax(${1:double x}, ${2:double y});${3}
# float fmaxf(float x, float y);
snippet fmaxf
	fmaxf(${1:float x}, ${2:float y});${3}
# long double fmaxl(long double x, long double y);
snippet fmaxl
	fmaxl(${1:long double x}, ${2:long double y});${3}
# double fma(double x, double y, double z);
snippet fma
	fma(${1:double x}, ${2:double y}, ${3:double z});${4}
# float fmaf(float x, float y, float z);
snippet fmaf
	fmaf(${1:float x}, ${2:float y}, ${3:float z});${4}
# long double fmal(long double x, long double y, long double z);
snippet fmal
	fmal(${1:long double x}, ${2:long double y}, ${3:long double z});${4}
################ include <setjmp.h> #################
# int setjmp(jmp_buf state);
snippet setjmp
	setjmp(${1:jmp_buf state});${2}
# void longjmp(jmp_buf state, int value);
snippet longjmp
	longjmp(${1:jmp_buf state}, ${2:int value});${3}
################ include <signal.h> #################
# void (*signal(int sig, void (*handler)(int)))(int);
snippet signal
	signal(${1:int sig}, ${2:void (*handler)(int)});${3}
# int raise(int signum);
snippet raise
	raise(${1:int signum});${2}
################ include <stdarg.h> #################
# void va_start(va_list ap, last-required);
snippet va_start
	va_start(${1:va_list ap}, ${2:last-required});${3}
# type va_arg(va_list ap, type);
snippet va_arg
	va_arg(${1:va_list ap}, ${2:type});${3}
# void va_end(va_list ap);
snippet va_end
	va_end(${1:va_list ap});${2}
# void va_copy (va_list dest, va_list src);
snippet va_copy
	va_copy(${1:va_list dest}, ${2:va_list src});${3}
################ include <stddef.h> #################
# size_t offsetof (type, member);
snippet offsetof
	offsetof(${1:type}, ${2:member});${3}
################ include <stdint.h> #################
# INTMAX_C(val);
snippet INTMAX_C
	INTMAX_C(${1:val});${2}
# UINTMAX_C(val);
snippet UINTMAX_C
	UINTMAX_C(${1:val});${2}
# INT8_C(val);
snippet INT8_C
	INT8_C(${1:val});${2}
# INT16_C(val);
snippet INT16_C
	INT16_C(${1:val});${2}
# INT32_C(val);
snippet INT32_C
	INT32_C(${1:val});${2}
# INT64_C(val);
snippet INT64_C
	INT64_C(${1:val});${2}
# UINT8_C(val);
snippet UINT8_C
	UINT8_C(${1:val});${2}
# UINT16_C(val);
snippet UINT16_C
	UINT16_C(${1:val});${2}
# UINT32_C(val);
snippet UINT32_C
	UINT32_C(${1:val});${2}
# UINT64_C(val);
snippet UINT64_C
	UINT64_C(${1:val});${2}
################ include <stdio.h> #################
# int remove(const char *file_name);
snippet remove
	remove(${1:const char *file_name});${2}
# int rename(const char *oldname, const char *newname);
snippet rename
	rename(${1:const char *oldname}, ${2:const char *newname});${3}
# FILE *tmpfile(void);
snippet tmpfile
	tmpfile(void);${1}
# char *tmpnam(char *result);
snippet tmpnam
	tmpnam(${1:char *result});${2}
# int fclose(FILE *stream);
snippet fclose
	fclose(${1:FILE *stream});${2}
# int fflush(FILE *stream);
snippet fflush
	fflush(${1:FILE *stream});${2}
# FILE *fopen(const char *file_name, const char *opentype);
snippet fopen
	fopen(${1:const char *file_name}, ${2:const char *opentype});${3}
# FILE *freopen(const char *file_name, const char *opentype, FILE *stream);
snippet freopen
	freopen(${1:const char *file_name}, ${2:const char *opentype}, ${3:FILE *stream});${4}
# void setbuf(FILE *stream, char *buf);
snippet setbuf
	setbuf(${1:FILE *stream}, ${2:char *buf});${3}
# int setvbuf(FILE *stream, char *buf, int mode, size_t size);
snippet setvbuf
	setvbuf(${1:FILE *stream}, ${2:char *buf}, ${3:int mode}, ${4:size_t size});${5}
# int printf(const char *format, ...);
#snippet printf
#	printf(${1:const char *format});${2}
# int fprintf(FILE *stream, const char *format, ...);
#snippet fprintf
#	fprintf(${1:FILE *stream}, ${2:const char *format});${3}
# int sprintf(char *s, const char *format, ...);
snippet sprintf
	sprintf(${1:char *s}, ${2:const char *format});${3}
# int snprintf(char *s, size_t size, const char *format, ...);
snippet snprintf
	snprintf(${1:char *s}, ${2:size_t size}, ${3:const char *format});${4}
# int vprintf(const char *format, va_list ap);
snippet vprintf
	vprintf(${1:const char *format}, ${2:va_list ap});${3}
# int vfprintf(FILE *stream, const char *format, va_list ap);
snippet vfprintf
	vfprintf(${1:FILE *stream}, ${2:const char *format}, ${3:va_list ap});${4}
# int vsnprintf(char *s, size_t size, const char *format, va_list ap);
snippet vsnprintf
	vsnprintf(${1:char *s}, ${2:size_t size}, ${3:const char *format}, ${4:va_list ap});${5}
# int scanf(const char *format, ...);
#snippet scanf
#	scanf(${1:const char *format});${2}
# int fscanf(FILE *stream, const char *format, ...);
snippet fscanf
	fscanf(${1:FILE *stream}, ${2:const char *format});${3}
# int sscanf(const char *s, const char *format, ...);
snippet sscanf
	sscanf(${1:const char *s}, ${2:const char *format});${3}
# int vscanf(const char *format, va_list ap);
snippet vscanf
	vscanf(${1:const char *format}, ${2:va_list ap});${3}
# int vfscanf(FILE *stream, const char *format, va_list ap);
snippet vfscanf
	vfscanf(${1:FILE *stream}, ${2:const char *format}, ${3:va_list ap});${4}
# int vsscanf(const char *s, const char *format, va_list ap);
snippet vsscanf
	vsscanf(${1:FILE *stream}, ${2:const char *format}, ${3:va_list ap});${4}
# int fgetc(FILE *stream);
snippet fgetc
	fgetc(${1:FILE *stream});${2}
# char *fgets(char *s, int count, FILE *stream);
snippet fgets
	fgets(${1:char *s}, ${2:int count}, ${3:FILE *stream});${4}
# int getc(FILE *stream);
snippet getc
	getc(${1:FILE *stream});${2}
# int getchar(void);
snippet getchar
	getchar(void);${1}
# char *gets(char *s);
snippet gets
	gets(${1:char *s});${2}
# int ungetc(int c, FILE *stream);
snippet ungetc
	ungetc(${1:int c}, ${2:FILE *stream});${3}
# int fputc(int c, FILE *stream);
snippet fputc
	fputc(${1:int c}, ${2:FILE *stream});${3}
# int putc(int c, FILE *stream);
snippet putc
	putc(${1:int c}, ${2:FILE *stream});${3}
# int puts(const char *s);
snippet puts
	puts(${1:const char *s});${2}
# int putchar(int c);
snippet putchar
	putchar(${1:int c});${2}
# size_t fread(void *data, size_t size, size_t count, FILE *stream);
snippet fread
	fread(${1:void *data}, ${2:size_t size}, ${3:size_t count}, ${4:FILE *stream});${5}
# size_t fwrite(const void *data, size_t size, size_t count, FILE *stream);
snippet fwrite
	fwrite(${1:const void *data}, ${2:size_t size}, ${3:size_t count}, ${4:FILE *stream});${5}
# int fgetpos(FILE *stream, fpos_t *position);
snippet fgetpos
	fgetpos(${1:FILE *stream}, ${2:fpos_t *position});${3}
# int fseek(FILE *stream, long int offset, int whence);
snippet fseek
	fseek(${1:FILE *stream}, ${2:long int offset}, ${3:int whence});${4}
# int fsetpos(FILE *stream, const fpos_t *position);
snippet fsetpos
	fsetpos(${1:FILE *stream}, ${2:const fpos_t *position});${3}
# long int ftell(FILE *stream);
snippet ftell
	ftell(${1:FILE *stream});${2}
# void rewind(FILE *stream);
snippet rewind
	rewind(${1:FILE *stream});${2}
# void clearerr(FILE *stream);
snippet clearerr
	clearerr(${1:FILE *stream});${2}
# int feof(FILE *stream);
snippet feof
	feof(${1:FILE *stream});${2}
# int ferror(FILE *stream);
snippet ferror
	ferror(${1:FILE *stream});${2}
# void perror(const char *msg);
snippet perror
	perror(${1:const char *msg});${2}
################ include <stdlib.h> #################
# double atof(const char *string);
snippet atof
	atof(${1:const char *string});${2}
# long int atol(const char *string);
snippet atol
	atol(${1:const char *string});${2}
# int atoi(const char *string);
snippet atoi
	atoi(${1:const char *string});${2}
# long long int atoll(const char *string);
snippet atoll
	atoll(${1:const char *string});${2}
# long int strtol(const char *restrict string, char **restrict tailptr, int base);
snippet strtol
	strtol(${1:const char *restrict string}, ${2:char **restrict tailptr}, ${3:int base});${4}
# long long int strtoll(const char *restrict string, char **restrict tailptr, int base);
snippet strtoll
	strtoll(${1:const char *restrict string}, ${2:char **restrict tailptr}, ${3:int base});${4}
# unsigned long int strtoul(const char *restrict string, char **restrict tailptr, int base);
snippet strtoul
	strtoul(${1:const char *restrict string}, ${2:char **restrict tailptr}, ${3:int base});${4}
# unsigned long long int strtoull(const char *restrict string, char **restrict tailptr, int base);
snippet strtoull
	strtoull(${1:const char *restrict string}, ${2:char **restrict tailptr}, ${3:int base});${4}
# double strtod(const char *restrict string, char **restrict tailptr);
snippet strtod
	strtod(${1:const char *restrict string}, ${2:char **restrict tailptr});${3}
# float strtof(const char *string, char **tailptr);
snippet strtof
	strtof(${1:const char *string}, ${2:char **tailptr});${3}
# long double strtold(const char *string, char **tailptr);
snippet strtold
	strtold(${1:const char *string}, ${2:char **tailptr});${3}
# int rand(void);
snippet rand
	rand(void);${1}
# void srand(unsigned int seed);
snippet srand
	srand(${1:unsigned int seed});${2}
# void *calloc(size_t count, size_t eltsize);
snippet calloc
	calloc(${1:size_t count}, ${2:size_t eltsize});${3}
# void free(void *ptr);
snippet free
	free(${1:void *ptr});${2}
# void *malloc(size_t size);
snippet malloc
	malloc(${1:size_t size});${2}
# void *realloc(void *ptr, size_t newsize);
snippet realloc
	realloc(${1:void *ptr}, ${2:size_t newsize});${3}
# void abort(void);
snippet abort
	abort(void);${1}
# int atexit(void (*function) (void));
snippet atexit
	atexit(${1:void (*function) (void)});${2}
# void exit(int status);
snippet exit
	exit(${1:int status});${2}
# void _Exit(int status);
snippet _Exit
	_Exit(${1:int status});${2}
# char *getenv(const char *name);
snippet getenv
	getenv(${1:const char *name});${2}
# int system(const char *command);
snippet system
	system(${1:const char *command});${2}
# void *bsearch(const void *key, const void *array, size_t count, size_t size, int (* compare)(const void *, const void *));
snippet bsearch
	bsearch(${1:const void *key}, ${2:const void *array}, ${3:size_t count}, ${4:size_t size}, ${5:int (* compare)(const void *, const void *)});${6}
# void qsort(void *array, size_t count, size_t size, int (* compare)(const void *, const void *));
snippet qsort
	qsort(${1:void *array}, ${2:size_t count}, ${3:size_t size}, ${4:int (* compare)(const void *, const void *)});${5}
# int abs(int number);
snippet abs
	abs(${1:int number});${2}
# long int labs(long int number);
snippet labs
	labs(${1:long int number});${2}
# div_t div(int numerator, int denominator);
snippet div
	div(${1:int numerator}, ${2:int denominator});${3}
# ldiv_t ldiv(long int numerator, long int denominator);
snippet ldiv
	ldiv(${1:long int numerator}, ${2:long int denominator});${3}
# lldiv_t lldiv(long long int numerator, long long int denominator);
snippet lldiv
	lldiv(${1:long long int numerator}, ${2:long long int denominator});${3}
# int mblen(const char *string, size_t size);
snippet mblen
	mblen(${1:const char *string}, ${2:size_t size});${3}
# int mbtowc(wchar_t *restrict result, const char *restrict string, size_t size);
snippet mbtowc
	mbtowc(${1:wchar_t *restrict result}, ${2:const char *restrict string}, ${3:size_t size});${4}
# int wctomb(char *string, wchar_t wchar);
snippet wctomb
	wctomb(${1:char *string}, ${2:wchar_t wchar});${3}
# size_t mbstowcs(wchar_t *wstring, const char *string, size_t size);
snippet mbstowcs
	mbstowcs(${1:wchar_t *wstring}, ${2:const char *string}, ${3:size_t size});${4}
# size_t wcstombs(char *string, const wchar_t *wstring, size_t size);
snippet wcstombs
	wcstombs(${1:char *string}, ${2:const wchar_t *wstring}, ${3:size_t size});${4}
################ include <string.h> #################
# void *memcpy(void *restrict to, const void *restrict from, size_t size);
snippet memcpy
	memcpy(${1:void *restrict to}, ${2:const void *restrict from}, ${3:size_t size});${4}
# void *memmove(void *to, const void *from, size_t size);
snippet memmove
	memmove(${1:void *to}, ${2:const void *from}, ${3:size_t size});${4}
# char *strcpy(char *restrict to, const char *restrict from);
snippet strcpy
	strcpy(${1:char *restrict to}, ${2:const char *restrict from});${3}
# char *strncpy(char *restrict to, const char *restrict from, size_t size);
snippet strncpy
	strncpy(${1:char *restrict to}, ${2:const char *restrict from}, ${3:size_t size});${4}
# char *strcat(char *restrict to, const char *restrict from);
snippet strcat
	strcat(${1:char *restrict to}, ${2:const char *restrict from});${3}
# char *strncat(char *restrict to, const char *restrict from, size_t size);
snippet strncat
	strncat(${1:char *restrict to}, ${2:const char *restrict from}, ${3:size_t size});${4}
# int memcmp(const void *a1, const void *a2, size_t size);
snippet memcmp
	memcmp(${1:const void *a1}, ${2:const void *a2}, ${3:size_t size});${4}
# int strcmp(const char *s1, const char *s2);
snippet strcmp
	strcmp(${1:const char *s1}, ${2:const char *s2});${3}
# int strcoll(const char *s1, const char *s2);
snippet strcoll
	strcoll(${1:const char *s1}, ${2:const char *s2});${3}
# int strncmp(const char *s1, const char *s2, size_t size);
snippet strncmp
	strncmp(${1:const char *s1}, ${2:const char *s2}, ${3:size_t size});${4}
# size_t strxfrm(char *restrict to, const char *restrict from, size_t size);
snippet strxfrm
	strxfrm(${1:char *restrict to}, ${2:const char *restrict from}, ${3:size_t size});${4}
# void *memchr(const void *block, int c, size_t size);
snippet memchr
	memchr(${1:const void *block}, ${2:int c}, ${3:size_t size});${4}
# char *strchr(const char *string, int c);
snippet strchr
	strchr(${1:const char *string}, ${2:int c});${3}
# size_t strcspn(const char *string, const char *stopset);
snippet strcspn
	strcspn(${1:const char *string}, ${2:const char *stopset});${3}
# char *strpbrk(const char *string, const char *stopset);
snippet strpbrk
	strpbrk(${1:const char *string}, ${2:const char *stopset});${3}
# char *strrchr(const char *string, int c);
snippet strrchr
	strrchr(${1:const char *string}, ${2:int c});${3}
# size_t strspn(const char *string, const char *skipset);
snippet strspn
	strspn(${1:const char *string}, ${2:const char *skipset});${3}
# char *strstr(const char *haystack, const char *needle);
snippet strstr
	strstr(${1:const char *string}, ${2:const char *skipset});${3}
# char *strtok(char *restrict newstring, const char *restrict delimiters);
snippet strtok
	strtok(${1:char *restrict newstring}, ${2:const char *restrict delimiters});${3}
# void *memset(void *block, int c, size_t size);
snippet memset
	memset(${1:const void *block}, ${2:int c}, ${3:size_t size});${4}
# char *strerror(int errnum);
snippet strerror
	strerrort(${1:int errnum});${2}
# size_t strlen(const char *s)
snippet strlen
	strlen(${1:const char *s});${2}
################ include <time.h> #################
# clock_t clock(void);
snippet clock
	clock(void);${1}
# double difftime(time_t time1, time_t time0);
snippet difftime
	difftime(${1:time_t time1}, ${2:time_t time0});${3}
# time_t mktime(struct tm *brokentime);
snippet mktime
	mktime(${1:struct tm *brokentime});${2}
# time_t time(time_t *result);
snippet time
	time(${1:time_t *result});${2}
# char *asctime(const struct tm *brokentime);
snippet asctime
	asctime(${1:const struct tm *brokentime});${2}
# char *ctime(const time_t *time);
snippet ctime
	ctime(${1:const time_t *time});${2}
# struct tm *gmtime(const time_t *time);
snippet gmtime
	gmtime(${1:const time_t *time});${2}
# struct tm *localtime (const time_t *time);
snippet localtime
	localtime(${1:const time_t *time});${2}
# size_t strftime(char *s, size_t size, const char *format, const struct tm *brokentime);
snippet strftime
	strftime(${1:char *s}, ${2:size_t size}, ${3:const char *format}, ${4:const struct tm *brokentime});${5}
################ include <wchar.h> #################
# int wprintf(const wchar_t *format, ...);
snippet wprintf
	wprintfe(${1:const wchar_t *format});${2}
# int fwprintf(FILE *stream, const wchar_t *format, ...);
snippet fwprintf
	fwprintf(${1:FILE *stream}, ${2:const wchar_t *format});${3}
# int swprintf(wchar_t *s, size_t size, const wchar_t *format, ...);
snippet swprintf
	swprintf(${1:wchar_t *s}, ${2:size_t size}, ${3:const wchar_t *format});${4}
# int vwprintf(const wchar_t *format, va_list ap);
snippet vwprintf
	vwprintf(${1:const wchar_t *format}, ${2:va_list ap});${3}
# int vfwprintf(FILE *stream, const wchar_t *format, va_list ap);
snippet vfwprintf
	vfwprintf(${1:FILE *stream}, ${2:const wchar_t *format}, ${3:va_list ap});${4}
# int vswprintf(wchar_t *s, size_t size, const wchar_t *format, va_list ap);
snippet vswprintf
	vswprintf(${1:wchar_t *s}, ${2:size_t size}, ${3:const wchar_t *format}, ${4:va_list ap});${5}
# int wscanf(const wchar_t *format, ...);
snippet wscanf
	wscanf(${1:const wchar_t *format});${2}
# int fwscanf(FILE *stream, const wchar_t *format, ...);
snippet fwscanf
	fwscanf(${1:FILE *stream}, ${2:const wchar_t *format});${3}
# int swscanf (const wchar_t *ws, const char *format, ...);
snippet swscanf
	swscanf(${1:const wchar_t *ws}, ${2:const char *format});${3}
# int vwscanf(const wchar_t *format, va_list ap);
snippet vwscanf
	vwscanf(${1:const wchar_t *format}, ${2:va_list ap});${3}
# int vfwscanf(FILE *stream, const wchar_t *format, va_list ap);
snippet vfwscanf
	vfwscanf(${1:FILE *stream}, ${2:const wchar_t *format}, ${3:va_list ap});${4}
# int vswscanf(const wchar_t *s, const wchar_t *format, va_list ap);
snippet vswscanf
	vswscanf(${1:wchar_t *s}, ${2:const wchar_t *format}, ${3:va_list ap});${4}
# wint_t fgetwc(FILE *stream);
snippet fgetwc
	fgetwc(${1:FILE *stream});${2}
# wchar_t *fgetws(wchar_t *ws, int count, FILE *stream);
snippet fgetws
	fgetws(${1:wchar_t *ws}, ${2:int count}, ${3:FILE *stream});${4}
# wint_t getwc(FILE *stream);
snippet getwc
	getwc(${1:FILE *stream});${2}
# wint_t getwchar(void);
snippet getwchar
	getwchar(void);${1}
# wint_t ungetwc(wint_t wc, FILE *stream);
snippet ungetwc
	ungetwc(${1:wint_t wc}, ${2:FILE *stream});${3}
# wint_t fputwc(wchar_t wc, FILE *stream);
snippet fputwc
	fputwc(${1:wint_t wc}, ${2:FILE *stream});${3}
# int fputws(const wchar_t *ws, FILE *stream);
snippet fputws
	fputws(${1:wint_t wc}, ${2:FILE *stream});${3}
# wint_t putwc(wchar_t wc, FILE *stream);
snippet putwc
	putwc(${1:wint_t wc}, ${2:FILE *stream});${3}
# wint_t putwchar(wchar_t wc);
snippet putwchar
	putwchar(${1:wchar_t wc});${2}
# int fwide(FILE *stream, int mode);
snippet fwide
	fwide(${1:FILE *stream}, ${2:int mode});${3}
# double wcstod(const wchar_t *restrict string, wchar_t **restrict tailptr);
snippet wcstod
	wcstod(${1:const wchar_t *restrict string}, ${2: wchar_t **restrict tailptr});${3}
# float wcstof(const wchar_t *string, wchar_t **tailptr);
snippet wcstof
	wcstof(${1:const wchar_t string}, ${2: wchar_t **tailptr});${3}
# long double wcstold(const wchar_t *string, wchar_t **tailptr);
snippet wcstold
	wcstold(${1:const wchar_t string}, ${2: wchar_t **tailptr});${3}
# long int wcstol(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstol
	wcstol(${1:const wchar_t *restrict string}, ${2:wchar_t **restrict tailptr}, ${3:int base});${4}
# long long int wcstoll(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstoll
	wcstoll(${1:const wchar_t *restrict string}, ${2:wchar_t **restrict tailptr}, ${3:int base});${4}
# unsigned long int wcstoul(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstoul
	wcstoul(${1:const wchar_t *restrict string}, ${2:wchar_t **restrict tailptr}, ${3:int base});${4}
# unsigned long long int wcstoull(const wchar_t *restrict string, wchar_t **restrict tailptr, int base);
snippet wcstoull
	wcstoull(${1:const wchar_t *restrict string}, ${2:wchar_t **restrict tailptr}, ${3:int base});${4}
# wchar_t *wcscpy(wchar_t *restrict wto, const wchar_t *restrict wfrom);
snippet wcscpy
	wcscpy(${1:wchar_t *restrict wto}, ${2:const wchar_t *restrict wfrom});${3}
# wchar_t *wcsncpy(wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size);
snippet wcsncpy
	wcsncpy(${1:wchar_t *restrict wto}, ${2:const wchar_t *restrict wfrom}, ${3:size_t size});${4}
# wchar_t *wmemcpy(wchar_t *restrict wto, const wchar_t *restruct wfrom, size_t size);
snippet wmemcpy
	wmemcpy(${1:wchar_t *restrict wto}, ${2:const wchar_t *restrict wfrom}, ${3:size_t size});${4}
# wchar_t *wmemmove(wchar *wto, const wchar_t *wfrom, size_t size);
snippet wmemmove
	wmemmove(${1:wchar *wto}, ${2:const wchar_t *wfrom}, ${3:size_t size});${4}
# wchar_t *wcscat(wchar_t *restrict wto, const wchar_t *restrict wfrom);
snippet wcscat
	wcscat(${1:wchar_t *restrict wto}, ${2:const wchar_t *restrict wfrom});${3}
# wchar_t *wcsncat(wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size);
snippet wcsncat
	wcsncat(${1:wchar_t *restrict wto}, ${2:const wchar_t *restrict wfrom}, ${3:size_t size});${4}
# int wcscmp(const wchar_t *ws1, const wchar_t *ws2);
snippet wcscmp
	wcscmp(${1:const wchar_t *ws1}, ${2:const wchar_t *ws2});${3}
# int wcscoll(const wchar_t *ws1, const wchar_t *ws2);
snippet wcscoll
	wcscoll(${1:const wchar_t *ws1}, ${2:const wchar_t *ws2});${3}
# int wcsncmp(const wchar_t *ws1, const wchar_t *ws2, size_t size);
snippet wcsncmp
	wcsncmp(${1:const wchar_t *ws1}, ${2:const wchar_t *ws2}, ${3:size_t size});${4}
# size_t wcsxfrm(wchar_t *restrict wto, const wchar_t *wfrom, size_t size);
snippet wcsxfrm
	wcsxfrm(${1:wchar_t *restrict wto}, ${2: const wchar_t *wfrom}, ${3:size_t size});${4}
# int wmemcmp(const wchar_t *a1, const wchar_t *a2, size_t size);
snippet wmemcmp
	wmemcmp(${1:const wchar_t *a1}, ${2: const wchar_t *a2}, ${3:size_t size});${4}
# wchar_t *wcschr(const wchar_t *wstring, int wc);
snippet wcschr
	wcschr(${1:const wchar_t *wstring}, ${2:int wc});${3}
# size_t wcscspn(const wchar_t *wstring, const wchar_t *stopset);
snippet wcscspn
	wcscspn(${1:const wchar_t *wstring}, ${2:const wchar_t *stopset});${3}
# wchar_t *wcspbrk (const wchar_t *wstring, const wchar_t *stopset);
snippet wcspbrk
	wcspbrk(${1:const wchar_t *wstring}, ${2:const wchar_t *stopset});${3}
# wchar_t *wcsrchr (const wchar_t *wstring, wchar_t c);
snippet wcsrchr
	wcsrchr(${1:const wchar_t *wstring}, ${2:wchar_t c});${3}
# size_t wcsspn(const wchar_t *wstring, const wchar_t *skipset);
snippet wcsspn
	wcsspn(${1:const wchar_t *wstring}, ${2:const wchar_t *skipset});${3}
# wchar_t *wcsstr(const wchar_t *haystack, const wchar_t *needle);
snippet wcsstr
	wcsstr(${1:const wchar_t *haystack}, ${2:const wchar_t *needle});${3}
# wchar_t *wcstok(wchar_t *newstring, const char *delimiters);
snippet wcstok
	wcstok(${1:wchar_t *newstring}, ${2:const char *delimiters});${3}
# wchar_t *wmemchr(const wchar_t *block, wchar_t wc, size_t size);
snippet wmemchr
	wmemchr(${1:const wchar_t *block}, ${2: wchar_t wc}, ${3:size_t size});${4}
# size_t wcslen(const wchar_t *ws);
snippet wcslen
	wcslen(${1:const wchar_t *ws});${2}
# wchar_t *wmemset(wchar_t *block, wchar_t wc, size_t size);
snippet wmemset
	wmemset(${1:wchar_t *block}, ${2: wchar_t wc}, ${3:size_t size});${4}
# size_t wcsftime(wchar_t *s, size_t size, const wchar_t *template, const struct tm *brokentime);
snippet wcsftime
	wcsftime(${1:wchar_t *s}, ${2:size_t size}, ${3:const wchar_t *template}, ${4:const struct tm *brokentime});${5}
# wint_t btowc(int c);
snippet btowc
	btowc(${1:int c});${2}
# int wctob(wint_t c);
snippet wctob
	wctob(${1:wint_t c});${2}
# int mbsinit(const mbstate_t *ps);
snippet mbsinit
	mbsinit(${1:const mbstate_t *ps});${2}
# size_t mbrlen(const char *restrict s, size_t n, mbstate_t *ps);
snippet mbrlen
	mbrlen(${1:const char *restrict s}, ${2: size_t n}, ${3:mbstate_t *ps});${4}
# size_t mbrtowc(wchar_t *restrict pwc, const char *restrict s, size_t n, mbstate_t *restrict ps);
snippet mbrtowc
	mbrtowc(${1:wchar_t *restrict pwc}, ${2:const char *restrict s}, ${3:size_t n}, ${4:mbstate_t *restrict ps});${5}
# size_t wcrtomb(char *restrict s, wchar_t wc, mbstate_t *restrict ps);
snippet wcrtomb
	wcrtomb(${1:char *restrict s}, ${2:wchar_t wc}, ${3:mbstate_t *restrict ps});${4}
# size_t mbsrtowcs(wchar_t *restrict dst, const char **restrict src, size_t len, mbstate_t *restrict ps);
snippet mbsrtowcs
	mbsrtowcs(${1:wchar_t *restrict dst}, ${2:const char **restrict src}, ${3:size_t len}, ${4:mbstate_t *restrict ps});${5}
# size_t wcsrtombs(char *restrict dst, const wchar_t **restrict src, size_t len, mbstate_t *restrict ps);
snippet wcsrtombs
	wcsrtombs(${1:char *restrict dst}, ${2:const wchar_t **restrict src}, ${3:size_t len}, ${4:mbstate_t *restrict ps});${5}
################ include <wctype.h> #################
# int iswalnum(wint_t wc);
snippet iswalnum
	iswalnum(${1:wint_t wc});${2}
# int iswalpha(wint_t wc);
snippet iswalpha
	iswalpha(${1:wint_t wc});${2}
# int iswblank(wint_t wc);
snippet iswblank
	iswblank(${1:wint_t wc});${2}
# int iswcntrl(wint_t wc);
snippet iswcntrl
	iswcntrl(${1:wint_t wc});${2}
# int iswdigit(wint_t wc);
snippet iswdigit
	iswdigit(${1:wint_t wc});${2}
# int iswgraph(wint_t wc);
snippet iswgraph
	iswgraph(${1:wint_t wc});${2}
# int iswlower(wint_t wc);
snippet iswlower
	iswlower(${1:wint_t wc});${2}
# int iswprint(wint_t wc);
snippet iswprint
	iswprint(${1:wint_t wc});${2}
# int iswpunct(wint_t wc);
snippet iswpunct
	iswpunct(${1:wint_t wc});${2}
# int iswspace(wint_t wc);
snippet iswspace
	iswspace(${1:wint_t wc});${2}
# int iswupper(wint_t wc);
snippet iswupper
	iswupper(${1:wint_t wc});${2}
# int iswxdigit(wint_t wc);
snippet iswxdigit
	iswxdigit(${1:wint_t wc});${2}
# int iswctype(wint_t wc, wctype_t desc);
snippet iswctype
	iswctype(${1:wint_t wc}, ${2:wctype_t desc});${3}
# wctype_t wctype(const char *property);
snippet wctype
	wctype(${1:const char *property});${2}
# wint_t towlower(wint_t wc);
snippet towlower
	towlower(${1:wint_t wc});${2}
# wint_t towupper(wint_t wc);
snippet towupper
	towupper(${1:wint_t wc});${2}
# wint_t towctrans(wint_t wc, wctrans_t desc);
snippet towctrans
	towctrans(${1:wint_t wc}, ${2:wctrans_t desc});${3}
# wctrans_t wctrans(const char *property);
snippet wctrans
	wctrans(${1:const char *property});${2}
######################################################
# Extra-snippets
######################################################
# large comment
snippet /***
	/**********************************************************************
	 * ${1:An interesting and long comment}
	 *********************************************************************/${2}
# title comment const char *restrict s
snippet /**
	/*****************************${1:Title}********************************/${2}
# standard comment
snippet /*
	/* ${1:Short comment} */${2}
# elegant comment
snippet /*_
	/* ${1:Comment}
	 */${2}
# switch, it would be great if switch could expands itself :[
snippet switch
	switch (${1:/* expression */})
	{
		case ${2:/* constant */}: ${3:/* code */};
			${4:break};${6}
		default: ${5:/* more code */};
			break;
	}
# prototype
snippet func
	${1:void} ${2:function_name}(${3:void});
# return
snippet ret
	return(${1:EXIT_SUCCESS});${2}
